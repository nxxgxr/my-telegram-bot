import os
import logging
import secrets
import uuid
from datetime import datetime, timezone, timedelta
from threading import Thread

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

import gspread
from google.oauth2.service_account import Credentials

from yookassa import Configuration, Payment

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---

BOT_TOKEN = os.environ.get("BOT_TOKEN") or "7941872387:AAGZayILmna-qHHyQy5V50wDGylo3yFCZ0A"
CREDS_FILE = "valture-license-bot-account.json"
SPREADSHEET_NAME = "valture"
SCOPE = [
    "https://www.googleapis.com/auth/spreadsheets",
    "https://www.googleapis.com/auth/drive",
]

YOOKASSA_SHOP_ID = os.environ.get("YOOKASSA_SHOP_ID")
YOOKASSA_SECRET_KEY = os.environ.get("YOOKASSA_SECRET_KEY")

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ÆKassa ---

Configuration.account_id = YOOKASSA_SHOP_ID
Configuration.secret_key = YOOKASSA_SECRET_KEY

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –†–∞–±–æ—Ç–∞ —Å Google Sheets ---

sheet_cache = None

def get_sheet():
    global sheet_cache
    if sheet_cache is None:
        try:
            creds = Credentials.from_service_account_file(CREDS_FILE, scopes=SCOPE)
            client = gspread.authorize(creds)
            sheet_cache = client.open(SPREADSHEET_NAME).sheet1
            logger.info("–£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Google Sheets")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets: {e}")
            raise
    return sheet_cache

def append_license_to_sheet(license_key, username):
    try:
        sheet = get_sheet()
        utc_plus_2 = timezone(timedelta(hours=2))
        now_utc_plus_2 = datetime.now(utc_plus_2)
        now_str = now_utc_plus_2.strftime("%Y-%m-%d %H:%M:%S")
        sheet.append_row([license_key, "", username, now_str])
        logger.info(f"–õ–∏—Ü–µ–Ω–∑–∏—è {license_key} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –¥–ª—è {username}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ª–∏—Ü–µ–Ω–∑–∏–∏: {e}")
        raise

# --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞ ---

def generate_license(length=32):
    key = ''.join(secrets.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789') for _ in range(length))
    logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∫–ª—é—á: {key}")
    return key

# --- –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –≤ –ÆKassa ---

def create_payment(amount="1000.00", description="–ü–æ–∫—É–ø–∫–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏ Valture") -> Payment:
    payment = Payment.create({
        "amount": {
            "value": amount,
            "currency": "RUB"
        },
        "confirmation": {
            "type": "redirect",
            "return_url": "https://t.me/valture_buy_bot"  # –¢–µ–ª–µ–≥—Ä–∞–º-—Å—Å—ã–ª–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
        },
        "capture": True,
        "description": description
    }, str(uuid.uuid4()))
    return payment

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

def get_keyboard(buttons):
    return InlineKeyboardMarkup([[InlineKeyboardButton(text, callback_data=callback)] for text, callback in buttons])

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    welcome_text = (
        "üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Valture!*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:"
    )
    await update.message.reply_text(welcome_text, parse_mode="Markdown", reply_markup=get_keyboard([("üìã –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é", "menu_main")]))

async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    buttons = [
        ("‚ÑπÔ∏è –û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏", "menu_about"),
        ("üí≥ –ö—É–ø–∏—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é", "menu_pay"),
        ("‚ùì FAQ", "menu_faq"),
        ("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", "menu_support"),
    ]
    await query.edit_message_text("üè† *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", parse_mode="Markdown", reply_markup=get_keyboard(buttons))

async def about(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    text = (
        "‚ú® *Valture ‚Äî –í–∞—à –ø—É—Ç—å –∫ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤—É –≤ –∏–≥—Ä–∞—Ö*\n\n"
        "–ú—ã –ø–æ–º–æ–≥–∞–µ–º –ø–æ–≤—ã—Å–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å.\n\n"
        "‚ûñ‚ûñ‚ûñ\n"
        "_–°–æ–∑–¥–∞–Ω–æ –¥–ª—è –≥–µ–π–º–µ—Ä–æ–≤._"
    )
    buttons = [("üîô –ù–∞–∑–∞–¥", "menu_main")]
    await query.edit_message_text(text, parse_mode="Markdown", reply_markup=get_keyboard(buttons))

async def pay(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    text = (
        "üí≥ *–ü—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ –ª–∏—Ü–µ–Ω–∑–∏–∏ Valture*\n\n"
        "–°—Ç–æ–∏–º–æ—Å—Ç—å: *1000 —Ä—É–±–ª–µ–π*\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø–æ–ª—É—á–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á.\n\n"
        "–ì–æ—Ç–æ–≤—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?"
    )
    buttons = [("‚úÖ –û–ø–ª–∞—Ç–∏—Ç—å", "pay_confirm"), ("üîô –ù–∞–∑–∞–¥", "menu_main")]
    await query.edit_message_text(text, parse_mode="Markdown", reply_markup=get_keyboard(buttons))

async def pay_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    try:
        payment = create_payment()
        pay_url = payment.confirmation.confirmation_url

        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å", url=pay_url)],
            [InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data="check_payment")]
        ])

        context.user_data["payment_id"] = payment.id

        await query.edit_message_text(
            "üí≥ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ.\n\n"
            "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É¬ª, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é.",
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def check_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    payment_id = context.user_data.get("payment_id")
    if not payment_id:
        await query.edit_message_text("‚ùå –ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–∞—Ç–µ–∂–µ. –ù–∞—á–Ω–∏—Ç–µ –æ–ø–ª–∞—Ç—É –∑–∞–Ω–æ–≤–æ.")
        return

    try:
        payment = Payment.find_one(payment_id)
        if payment.status == "succeeded":
            license_key = generate_license()
            username = query.from_user.username or query.from_user.full_name
            append_license_to_sheet(license_key, username)

            await query.edit_message_text(
                f"üéâ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n\n–í–∞—à –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–π –∫–ª—é—á:\n`{license_key}`\n\n–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –µ–≥–æ!",
                parse_mode="Markdown"
            )
            context.user_data.pop("payment_id", None)

        elif payment.status == "pending":
            await query.answer("–û–ø–ª–∞—Ç–∞ –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

        else:
            await query.edit_message_text(f"–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞: {payment.status}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å –∑–∞–Ω–æ–≤–æ.")
            context.user_data.pop("payment_id", None)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–ø–ª–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def support(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    text = (
        "üìû *–ü–æ–¥–¥–µ—Ä–∂–∫–∞ Valture*\n\n"
        "Telegram: @valture_support"
    )
    buttons = [("üîô –ù–∞–∑–∞–¥", "menu_main")]
    await query.edit_message_text(text, parse_mode="Markdown", reply_markup=get_keyboard(buttons))

async def faq(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    text = (
        "‚ùì *FAQ*\n\n"
        "Q: –ß—Ç–æ —Ç–∞–∫–æ–µ Valture?\n"
        "A: –û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –¥–ª—è –∏–≥—Ä.\n\n"
        "Q: –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é?\n"
        "A: –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ –ÆKassa –∏ –ø–æ–ª—É—á–∏—Ç—å –∫–ª—é—á –∑–¥–µ—Å—å.\n\n"
        "Q: –ö—É–¥–∞ –≤–≤–æ–¥–∏—Ç—å –∫–ª—é—á?\n"
        "A: –í –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ Valture."
    )
    buttons = [("üîô –ù–∞–∑–∞–¥", "menu_main")]
    await query.edit_message_text(text, parse_mode="Markdown", reply_markup=get_keyboard(buttons))

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data

    if data == "menu_main":
        await main_menu(update, context)
    elif data == "menu_about":
        await about(update, context)
    elif data == "menu_pay":
        await pay(update, context)
    elif data == "pay_confirm":
        await pay_confirm(update, context)
    elif data == "check_payment":
        await check_payment(update, context)
    elif data == "menu_support":
        await support(update, context)
    elif data == "menu_faq":
        await faq(update, context)
    else:
        await query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞", show_alert=True)

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---

def main():
    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()

if __name__ == "__main__":
    main()
