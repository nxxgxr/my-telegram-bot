import os
import logging
import secrets
import requests
import base64
import json
from datetime import datetime, timezone, timedelta
from threading import Thread
from uuid import uuid4

from flask import Flask, request, jsonify
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

import gspread
from google.oauth2.service_account import Credentials
from yookassa import Configuration, Payment

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---

BOT_TOKEN = os.environ.get("BOT_TOKEN") or "7941872387:AAGZayILmna-qHHyQy5V50wDGylo3yFCZ0A"
CRYPTOBOT_API_TOKEN = os.environ.get("CRYPTOBOT_API_TOKEN")
YOOKASSA_SHOP_ID = os.environ.get("YOOKASSA_SHOP_ID")
YOOKASSA_SECRET_KEY = os.environ.get("YOOKASSA_SECRET_KEY")
CREDS_FILE = os.environ.get("CREDS_FILE") or "valture-license-bot-account.json"
SPREADSHEET_NAME = os.environ.get("SPREADSHEET_NAME") or "valture"
GOOGLE_CREDS_JSON_BASE64 = os.environ.get("GOOGLE_CREDS_JSON_BASE64")
SCOPE = [
    "https://www.googleapis.com/auth/spreadsheets",
    "https://www.googleapis.com/auth/drive",
]

# CryptoBot API endpoint
CRYPTO_BOT_API = "https://pay.crypt.bot/api"

# Configure YooKassa
if YOOKASSA_SHOP_ID and YOOKASSA_SECRET_KEY:
    Configuration.account_id = YOOKASSA_SHOP_ID
    Configuration.secret_key = YOOKASSA_SECRET_KEY

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.DEBUG
)
logger = logging.getLogger(__name__)

# --- Flask –¥–ª—è keep-alive –∏ –≤–µ–±—Ö—É–∫–æ–≤ ---

app = Flask(__name__)

@app.route('/')
def home():
    return "‚úÖ Valture –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

@app.route('/test-crypto-api')
def test_crypto_api():
    """Debug endpoint to test CryptoBot API connectivity."""
    try:
        headers = {"Crypto-Pay-API-Token": CRYPTOBOT_API_TOKEN}
        response = requests.get(f"{CRYPTO_BOT_API}/getMe", headers=headers, timeout=10)
        return f"API Response: {response.json()}"
    except Exception as e:
        return f"Error: {str(e)}"

@app.route('/yookassa-webhook', methods=['POST'])
def yookassa_webhook():
    """Handle YooKassa payment notifications."""
    try:
        event_json = request.get_json()
        logger.debug(f"YooKassa webhook received: {event_json}")
        
        if not event_json or 'event' not in event_json or 'object' not in event_json:
            logger.error("Invalid webhook payload")
            return jsonify({"status": "error", "message": "Invalid payload"}), 400

        event = event_json['event']
        payment_object = event_json['object']
        
        if event == 'payment.succeeded':
            payment_id = payment_object['id']
            metadata = payment_object.get('metadata', {})
            user_id = metadata.get('user_id')
            username = metadata.get('username')
            
            if not user_id or not username:
                logger.error(f"Missing metadata in webhook: user_id={user_id}, username={username}")
                return jsonify({"status": "error", "message": "Missing metadata"}), 400

            # Store payment confirmation for async processing
            from application import application
            job_queue = application.job_queue
            job_queue.run_once(
                process_yookassa_payment,
                0,
                context={
                    'payment_id': payment_id,
                    'user_id': int(user_id),
                    'username': username,
                    'chat_id': int(user_id)  # Assuming private chat
                },
                name=f"yookassa_payment_{payment_id}"
            )
            logger.info(f"YooKassa payment succeeded: payment_id={payment_id}, user={username}")
            return jsonify({"status": "ok"}), 200
        
        elif event == 'payment.canceled':
            logger.warning(f"YooKassa payment canceled: payment_id={payment_object['id']}")
            return jsonify({"status": "ok"}), 200
        
        return jsonify({"status": "ignored"}), 200
    
    except Exception as e:
        logger.error(f"Error in YooKassa webhook: {e}", exc_info=True)
        return jsonify({"status": "error", "message": str(e)}), 500

async def process_yookassa_payment(context: ContextTypes.DEFAULT_TYPE):
    """Process confirmed YooKassa payment and issue license key."""
    job_context = context.job.context
    payment_id = job_context['payment_id']
    user_id = job_context['user_id']
    username = job_context['username']
    chat_id = job_context['chat_id']

    try:
        license_key = generate_license()
        append_license_to_sheet(license_key, username)
        text = (
            "üéâ *Purchase Successful!*\n\n"
            "Your license key:\n"
            f"`{license_key}`\n\n"
            "Keep it safe and enjoy Valture! üöÄ"
        )
        await context.bot.send_message(
            chat_id=chat_id,
            text=text,
            parse_mode="Markdown"
        )
        logger.info(f"YooKassa payment processed, key issued: {license_key} for {username}")
    except Exception as e:
        logger.error(f"Error processing YooKassa payment {payment_id}: {e}", exc_info=True)
        error_text = (
            "‚ùå *Something went wrong!*\n\n"
            "We couldn‚Äôt issue your key. Please contact @s3pt1ck for help."
        )
        await context.bot.send_message(
            chat_id=chat_id,
            text=error_text,
            parse_mode="Markdown"
        )

def run_flask():
    port = int(os.environ.get("PORT", 8080))
    app.run(host="0.0.0.0", port=port)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ Google Credentials ---

def setup_google_creds():
    """–î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ base64-–∫—Ä–µ–¥–µ–Ω—à–ª–æ–≤ Google –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞."""
    logger.debug("–ü—Ä–æ–≤–µ—Ä–∫–∞ Google credentials...")
    if GOOGLE_CREDS_JSON_BASE64:
        try:
            creds_json = base64.b64decode(GOOGLE_CREDS_JSON_BASE64).decode("utf-8")
            with open(CREDS_FILE, "w") as f:
                f.write(creds_json)
            logger.info("Google credentials —É—Å–ø–µ—à–Ω–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ Google credentials: {e}")
            raise
    elif not os.path.exists(CREDS_FILE):
        logger.error("–§–∞–π–ª Google credentials –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏ GOOGLE_CREDS_JSON_BASE64 –Ω–µ –∑–∞–¥–∞–Ω")
        raise FileNotFoundError("–§–∞–π–ª Google credentials –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏ GOOGLE_CREDS_JSON_BASE64 –Ω–µ –∑–∞–¥–∞–Ω")
    else:
        logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª Google credentials")

# --- –õ–æ–≥–∏–∫–∞ Telegram –±–æ—Ç–∞ ---

# –ö—ç—à –¥–ª—è –¥–∞–Ω–Ω—ã—Ö Google Sheets
sheet_cache = None

def get_sheet():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ Google Sheets."""
    global sheet_cache
    if sheet_cache is None:
        try:
            setup_google_creds()
            creds = Credentials.from_service_account_file(CREDS_FILE, scopes=SCOPE)
            client = gspread.authorize(creds)
            sheet_cache = client.open(SPREADSHEET_NAME).sheet1
            logger.info("–£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Google Sheets")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets: {e}")
            raise
    return sheet_cache

def generate_license(length=32):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞."""
    try:
        key = ''.join(secrets.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789') for _ in range(length))
        logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∫–ª—é—á: {key}")
        return key
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–∞: {e}")
        raise

def append_license_to_sheet(license_key, username):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–∏—Ü–µ–Ω–∑–∏–∏ –≤ Google Sheets."""
    try:
        sheet = get_sheet()
        utc_plus_2 = timezone(timedelta(hours=2))
        now_utc_plus_2 = datetime.now(utc_plus_2)
        now_str = now_utc_plus_2.strftime("%Y-%m-%d %H:%M:%S")
        sheet.append_row([license_key, "", username, now_str])
        logger.info(f"–õ–∏—Ü–µ–Ω–∑–∏—è {license_key} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –¥–ª—è {username}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ª–∏—Ü–µ–Ω–∑–∏–∏: {e}")
        raise

def create_crypto_invoice(amount, asset="TON", description="Valture License"):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞ —á–µ—Ä–µ–∑ CryptoBot."""
    logger.debug(f"–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞: amount={amount}, asset={asset}, description={description}")
    if not CRYPTOBOT_API_TOKEN:
        logger.error("CRYPTOBOT_API_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return None, "CRYPTOBOT_API_TOKEN –Ω–µ –∑–∞–¥–∞–Ω"

    try:
        payload = {
            "amount": str(amount),
            "asset": asset,
            "description": description,
            "order_id": secrets.token_hex(16),
        }
        headers = {
            "Crypto-Pay-API-Token": CRYPTOBOT_API_TOKEN,
            "Content-Type": "application/json"
        }
        logger.debug(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ {CRYPTO_BOT_API}/createInvoice —Å payload: {payload}")
        
        response = requests.post(f"{CRYPTO_BOT_API}/createInvoice", json=payload, headers=headers, timeout=10)
        logger.debug(f"HTTP —Å—Ç–∞—Ç—É—Å: {response.status_code}, –û—Ç–≤–µ—Ç: {response.text}")
        
        response.raise_for_status()
        data = response.json()
        
        if data.get("ok"):
            logger.info(f"–ò–Ω–≤–æ–π—Å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: invoice_id={data['result']['invoice_id']}")
            return data["result"], None
        else:
            error_msg = data.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –æ—Ç CryptoBot")
            logger.error(f"–û—à–∏–±–∫–∞ API CryptoBot: {error_msg}")
            return None, f"–û—à–∏–±–∫–∞ API: {error_msg}"
            
    except requests.exceptions.HTTPError as http_err:
        logger.error(f"HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞: {http_err}, –û—Ç–≤–µ—Ç: {response.text}")
        if response.status_code == 401:
            return None, "–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π CRYPTOBOT_API_TOKEN"
        elif response.status_code == 429:
            return None, "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ CryptoBot API"
        return None, f"HTTP –æ—à–∏–±–∫–∞: {http_err}"
    except requests.exceptions.Timeout:
        logger.error("–¢–∞–π–º-–∞—É—Ç –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ CryptoBot API")
        return None, "–¢–∞–π–º-–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ CryptoBot API"
    except requests.exceptions.RequestException as req_err:
        logger.error(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞: {req_err}")
        return None, f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: {req_err}"
    except Exception as e:
        logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞: {e}")
        return None, f"–û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}"

def check_invoice_status(invoice_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω–≤–æ–π—Å–∞ CryptoBot."""
    logger.debug(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω–≤–æ–π—Å–∞: invoice_id={invoice_id}")
    try:
        headers = {"Crypto-Pay-API-Token": CRYPTOBOT_API_TOKEN}
        response = requests.get(f"{CRYPTO_BOT_API}/getInvoices?invoice_ids={invoice_id}", headers=headers, timeout=10)
        logger.debug(f"HTTP —Å—Ç–∞—Ç—É—Å: {response.status_code}, –û—Ç–≤–µ—Ç: {response.text}")
        response.raise_for_status()
        data = response.json()
        if data.get("ok"):
            status = data["result"]["items"][0]["status"]
            logger.info(f"–°—Ç–∞—Ç—É—Å –∏–Ω–≤–æ–π—Å–∞ {invoice_id}: {status}")
            return status
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω–≤–æ–π—Å–∞: {data.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            return None
    except requests.exceptions.HTTPError as http_err:
        logger.error(f"HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏–Ω–≤–æ–π—Å–∞: {http_err}, –û—Ç–≤–µ—Ç: {response.text}")
        return None
    except requests.exceptions.RequestException as req_err:
        logger.error(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏–Ω–≤–æ–π—Å–∞: {req_err}")
        return None
    except Exception as e:
        logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏–Ω–≤–æ–π—Å–∞: {e}")
        return None

def create_yookassa_payment(amount, description, user_id, username):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ YooKassa."""
    logger.debug(f"–°–æ–∑–¥–∞–Ω–∏–µ YooKassa –ø–ª–∞—Ç–µ–∂–∞: amount={amount}, description={description}, user_id={user_id}")
    if not YOOKASSA_SHOP_ID or not YOOKASSA_SECRET_KEY:
        logger.error("YOOKASSA_SHOP_ID –∏–ª–∏ YOOKASSA_SECRET_KEY –Ω–µ –∑–∞–¥–∞–Ω—ã")
        return None, "YooKassa credentials not configured"

    try:
        idempotence_key = str(uuid4())
        payment = Payment.create({
            "amount": {
                "value": f"{amount:.2f}",
                "currency": "RUB"
            },
            "confirmation": {
                "type": "redirect",
                "return_url": "https://t.me/valture_buy_bot"
            },
            "capture": True,
            "description": description,
            "metadata": {
                "user_id": str(user_id),
                "username": username
            }
        }, idempotence_key)

        logger.info(f"YooKassa –ø–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω: payment_id={payment.id}")
        return payment, None

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ YooKassa –ø–ª–∞—Ç–µ–∂–∞: {e}")
        return None, f"YooKassa –æ—à–∏–±–∫–∞: {str(e)}"

def get_keyboard(buttons):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏."""
    return InlineKeyboardMarkup([[InlineKeyboardButton(text, callback_data=callback)] for text, callback in buttons])

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Welcome message with a friendly introduction."""
    welcome_text = (
        "üéÆ *Welcome to Valture!*\n\n"
        "Your ultimate gaming performance tool awaits! üöÄ\n"
        "Choose an option below to get started:"
    )
    buttons = [("üè† Main Menu", "menu_main")]
    await update.message.reply_text(welcome_text, parse_mode="Markdown", reply_markup=get_keyboard(buttons))

async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Display the main menu without a Back button."""
    query = update.callback_query
    await query.answer()
    buttons = [
        ("‚ÑπÔ∏è About Valture", "menu_about"),
        ("üì∞ News", "menu_news"),
        ("üí≥ Buy License", "menu_pay"),
        ("‚ùì FAQ", "menu_faq"),
        ("üìû Support", "menu_support"),
    ]
    await query.edit_message_text(
        "üè† *Main Menu*\n\nSelect an option:",
        parse_mode="Markdown",
        reply_markup=get_keyboard(buttons)
    )

async def about(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Improved About section with concise text and Back button."""
    query = update.callback_query
    await query.answer()
    text = (
        "‚ú® *Valture: Game Like a Pro*\n\n"
        "Valture boosts your gaming with:\n"
        "üöÄ *20‚Äì30% FPS boost*\n"
        "üõ°Ô∏è *Stable frame rates*\n"
        "‚ö° *Lightning-fast response*\n"
        "üîß *Optimized Windows settings*\n"
        "üñ±Ô∏è *Precise mouse control*\n\n"
        "Ready to dominate? Get your license now!"
    )
    buttons = [("üîô Back to Main Menu", "menu_main")]
    await query.edit_message_text(text, parse_mode="Markdown", reply_markup=get_keyboard(buttons))

async def pay(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Payment menu with updated price and Back button."""
    query = update.callback_query
    await query.answer()
    text = (
        "üí≥ *Buy a Valture License*\n\n"
        "Price: *4 TON* or *1000 RUB (~$10)*\n"
        "Choose your payment method:\n"
        "- *CryptoBot*: Pay 4 TON with cryptocurrency.\n"
        "- *YooKassa*: Pay with card or other methods.\n\n"
        "Your license key will be sent here after payment."
    )
    buttons = [
        ("üí∏ Pay with CryptoBot", "pay_crypto"),
        ("üí≥ Pay with YooKassa", "pay_yookassa"),
        ("üîô Back to Main Menu", "menu_main")
    ]
    await query.edit_message_text(text, parse_mode="Markdown", reply_markup=get_keyboard(buttons))

async def pay_crypto(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """CryptoBot payment with confirmation prompt and Back button."""
    query = update.callback_query
    await query.answer()
    text = (
        "üí∏ *Confirm CryptoBot Payment*\n\n"
        "You‚Äôre about to pay *4 TON* for a Valture license.\n"
        "Proceed with payment?"
    )
    buttons = [
        ("‚úÖ Confirm Payment", "pay_crypto_confirm"),
        ("üîô Back to Payment Options", "menu_pay")
    ]
    await query.edit_message_text(text, parse_mode="Markdown", reply_markup=get_keyboard(buttons))

async def pay_crypto_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle CryptoBot payment after confirmation."""
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    username = query.from_user.username or query.from_user.full_name

    try:
        logger.debug(f"Creating CryptoBot invoice for user: {username} (ID: {user_id})")
        invoice, error = create_crypto_invoice(amount=4.0, asset="TON", description="Valture License")
        if not invoice:
            error_msg = (
                "‚ùå *Oops, something went wrong!*\n\n"
                f"Couldn‚Äôt create invoice: {error or 'Unknown error'}.\n"
                "Please try again or contact @s3pt1ck."
            )
            buttons = [
                ("üîÑ Try Again", "pay_crypto"),
                ("üîô Back to Payment Options", "menu_pay")
            ]
            logger.error(f"Error in pay_crypto: {error}")
            await query.edit_message_text(error_msg, parse_mode="Markdown", reply_markup=get_keyboard(buttons))
            return

        invoice_id = invoice["invoice_id"]
        pay_url = invoice["pay_url"]

        context.user_data["payment_type"] = "crypto"
        context.user_data["invoice_id"] = invoice_id
        context.user_data["username"] = username
        logger.info(f"CryptoBot invoice created: invoice_id={invoice_id}, pay_url={pay_url}")

        text = (
            "üí∏ *Pay with CryptoBot*\n\n"
            "Click below to pay *4 TON*:\n"
            f"[Pay via CryptoBot]({pay_url})\n\n"
            "After payment, confirm below to receive your key."
        )
        buttons = [
            ("‚úÖ Confirm Payment", "pay_verify"),
            ("üîô Back to Payment Options", "menu_pay")
        ]
        await query.edit_message_text(text, parse_mode="Markdown", reply_markup=get_keyboard(buttons), disable_web_page_preview=True)
    except Exception as e:
        logger.error(f"Critical error in pay_crypto_confirm: {e}", exc_info=True)
        error_msg = (
            "‚ùå *Something broke!*\n\n"
            "We couldn‚Äôt process your request. Please try again or contact @s3pt1ck."
        )
        buttons = [
            ("üîÑ Try Again", "pay_crypto"),
            ("üîô Back to Payment Options", "menu_pay")
        ]
        await query.edit_message_text(error_msg, parse_mode="Markdown", reply_markup=get_keyboard(buttons))

async def pay_yookassa(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """YooKassa payment with confirmation prompt."""
    query = update.callback_query
    await query.answer()
    text = (
        "üí≥ *Confirm YooKassa Payment*\n\n"
        "You‚Äôre about to pay *1000 RUB* for a Valture license.\n"
        "Proceed with payment?"
    )
    buttons = [
        ("‚úÖ Confirm Payment", "pay_yookassa_confirm"),
        ("üîô Back to Payment Options", "menu_pay")
    ]
    await query.edit_message_text(text, parse_mode="Markdown", reply_markup=get_keyboard(buttons))

async def pay_yookassa_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle YooKassa payment after confirmation."""
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    username = query.from_user.username or query.from_user.full_name

    try:
        logger.debug(f"Creating YooKassa payment for user: {username} (ID: {user_id})")
        payment, error = create_yookassa_payment(
            amount=1000.0,
            description="Valture License",
            user_id=user_id,
            username=username
        )
        if not payment:
            error_msg = (
                "‚ùå *Oops, something went wrong!*\n\n"
                f"Couldn‚Äôt create payment: {error or 'Unknown error'}.\n"
                "Please try again or contact @s3pt1ck."
            )
            buttons = [
                ("üîÑ Try Again", "pay_yookassa"),
                ("üîô Back to Payment Options", "menu_pay")
            ]
            logger.error(f"Error in pay_yookassa: {error}")
            await query.edit_message_text(error_msg, parse_mode="Markdown", reply_markup=get_keyboard(buttons))
            return

        payment_id = payment.id
        confirmation_url = payment.confirmation.confirmation_url

        context.user_data["payment_type"] = "yookassa"
        context.user_data["payment_id"] = payment_id
        context.user_data["username"] = username
        logger.info(f"YooKassa payment created: payment_id={payment_id}, confirmation_url={confirmation_url}")

        text = (
            "üí≥ *Pay with YooKassa*\n\n"
            "Click below to pay *1000 RUB*:\n"
            f"[Pay via YooKassa]({confirmation_url})\n\n"
            "Your key will be sent automatically after payment."
        )
        buttons = [("üîô Back to Payment Options", "menu_pay")]
        await query.edit_message_text(text, parse_mode="Markdown", reply_markup=get_keyboard(buttons), disable_web_page_preview=True)
    except Exception as e:
        logger.error(f"Critical error in pay_yookassa_confirm: {e}", exc_info=True)
        error_msg = (
            "‚ùå *Something broke!*\n\n"
            "We couldn‚Äôt process your request. Please try again or contact @s3pt1ck."
        )
        buttons = [
            ("üîÑ Try Again", "pay_yookassa"),
            ("üîô Back to Payment Options", "menu_pay")
        ]
        await query.edit_message_text(error_msg, parse_mode="Markdown", reply_markup=get_keyboard(buttons))

async def pay_verify(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Improved payment verification with Back button."""
    query = update.callback_query
    await query.answer()

    payment_type = context.user_data.get("payment_type")
    if payment_type != "crypto":
        text = (
            "‚ùå *Whoops!*\n\n"
            "This is for CryptoBot payments only. YooKassa payments are confirmed automatically."
        )
        buttons = [("üîô Back to Payment Options", "menu_pay")]
        await query.edit_message_text(text, parse_mode="Markdown", reply_markup=get_keyboard(buttons))
        return

    invoice_id = context.user_data.get("invoice_id")
    username = context.user_data.get("username")

    if not invoice_id or not username:
        logger.error(f"Payment data missing: invoice_id={invoice_id}, username={username}")
        text = (
            "‚ùå *Something‚Äôs missing!*\n\n"
            "We couldn‚Äôt find your payment details. Try again or contact @s3pt1ck."
        )
        buttons = [
            ("üîÑ Try Again", "pay_crypto"),
            ("üîô Back to Payment Options", "menu_pay")
        ]
        await query.edit_message_text(text, parse_mode="Markdown", reply_markup=get_keyboard(buttons))
        return

    try:
        text = "‚è≥ *Checking your payment...*\n\nPlease wait a moment."
        buttons = [("üîô Back to Payment Options", "menu_pay")]
        await query.edit_message_text(text, parse_mode="Markdown", reply_markup=get_keyboard(buttons))

        status = check_invoice_status(invoice_id)
        if status == "paid":
            license_key = generate_license()
            append_license_to_sheet(license_key, username)
            text = (
                "üéâ *Purchase Successful!*\n\n"
                "Your license key:\n"
                f"`{license_key}`\n\n"
                "Keep it safe and enjoy Valture! üöÄ"
            )
            buttons = [("üè† Back to Main Menu", "menu_main")]
            logger.info(f"CryptoBot payment confirmed, key issued: {license_key} for {username}")
            await query.edit_message_text(text, parse_mode="Markdown", reply_markup=get_keyboard(buttons))
            context.user_data.clear()
        else:
            logger.warning(f"CryptoBot payment not confirmed for invoice_id={invoice_id}, status: {status}")
            text = (
                "‚è≥ *Payment Not Confirmed Yet*\n\n"
                "Please complete the payment or try again. Contact @s3pt1ck if you need help."
            )
            buttons = [
                ("üîÑ Check Again", "pay_verify"),
                ("üîô Back to Payment Options", "menu_pay")
            ]
            await query.edit_message_text(text, parse_mode="Markdown", reply_markup=get_keyboard(buttons))
    except Exception as e:
        logger.error(f"Error checking CryptoBot payment: {e}", exc_info=True)
        text = (
            "‚ùå *Something went wrong!*\n\n"
            "We couldn‚Äôt verify your payment. Try again or contact @s3pt1ck."
        )
        buttons = [
            ("üîÑ Try Again", "pay_verify"),
            ("üîô Back to Payment Options", "menu_pay")
        ]
        await query.edit_message_text(text, parse_mode="Markdown", reply_markup=get_keyboard(buttons))

async def support(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Support menu with Back button."""
    query = update.callback_query
    await query.answer()
    text = (
        "üìû *Need Help?*\n\n"
        "Reach out to our support team:\n"
        "üëâ *@s3pt1ck*\n\n"
        "We‚Äôll get back to you ASAP! üòä"
    )
    buttons = [("üîô Back to Main Menu", "menu_main")]
    await query.edit_message_text(text, parse_mode="Markdown", reply_markup=get_keyboard(buttons))

async def faq(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """FAQ with concise answers and Back button."""
    query = update.callback_query
    await query.answer()
    text = (
        "‚ùì *FAQ*\n\n"
        "üîπ *How do I get a license?*\n"
        "Go to 'Buy License' and choose a payment method.\n\n"
        "üîπ *What if my key doesn‚Äôt work?*\n"
        "Contact @s3pt1ck for quick help.\n\n"
        "üîπ *Can I use the key on multiple devices?*\n"
        "No, each key is for one device only."
    )
    buttons = [("üîô Back to Main Menu", "menu_main")]
    await query.edit_message_text(text, parse_mode="Markdown", reply_markup=get_keyboard(buttons))

async def news(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """News section with Back button."""
    query = update.callback_query
    await query.answer()
    text = (
        "üì∞ *Valture News*\n\n"
        "Stay tuned for updates!\n"
        "No new announcements yet. üìÖ"
    )
    buttons = [("üîô Back to Main Menu", "menu_main")]
    await query.edit_message_text(text, parse_mode="Markdown", reply_markup=get_keyboard(buttons))

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Updated button handler with new callback."""
    query = update.callback_query
    data = query.data

    if data == "menu_main":
        await main_menu(update, context)
    elif data == "menu_pay":
        await pay(update, context)
    elif data == "pay_crypto":
        await pay_crypto(update, context)
    elif data == "pay_crypto_confirm":
        await pay_crypto_confirm(update, context)
    elif data == "pay_yookassa":
        await pay_yookassa(update, context)
    elif data == "pay_yookassa_confirm":
        await pay_yookassa_confirm(update, context)
    elif data == "pay_verify":
        await pay_verify(update, context)
    elif data == "menu_support":
        await support(update, context)
    elif data == "menu_faq":
        await faq(update, context)
    elif data == "menu_about":
        await about(update, context)
    elif data == "menu_news":
        await news(update, context)

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    Thread(target=run_flask).start()

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application = Application.builder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))

    logger.info("Valture –±–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    application.run_polling()
