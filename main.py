import logging
from datetime import datetime
import random
import string

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

import gspread
from google.oauth2.service_account import Credentials

from keep_alive import keep_alive  # üü¢ –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã 24/7

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = "7713643772:AAG4LsuhHbg5efhMayuzeVwiyAxnCfq8txA"
CREDS_FILE = "valture-license-bot-account.json"
SPREADSHEET_NAME = "valture"
SCOPE = [
    "https://www.googleapis.com/auth/spreadsheets",
    "https://www.googleapis.com/auth/drive",
]

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logger = logging.getLogger()
logger.setLevel(logging.INFO)
for handler in logger.handlers[:]:
    logger.removeHandler(handler)
logging.basicConfig(format='%(message)s', level=logging.INFO)
logging.getLogger("telegram").setLevel(logging.CRITICAL)
logging.getLogger("telegram.ext").setLevel(logging.CRITICAL)
logging.getLogger("urllib3").setLevel(logging.CRITICAL)

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞
def generate_license(length=32):
    return ''.join(random.choices(string.ascii_uppercase + string.digits, k=length))

# –ó–∞–ø–∏—Å—å –≤ Google –¢–∞–±–ª–∏—Ü—É
def append_license_to_sheet(license_key, username):
    creds = Credentials.from_service_account_file(CREDS_FILE, scopes=SCOPE)
    client = gspread.authorize(creds)
    sheet = client.open(SPREADSHEET_NAME).sheet1
    now_str = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    sheet.append_row([license_key, "", username, now_str])

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
def get_keyboard(buttons):
    return InlineKeyboardMarkup([[InlineKeyboardButton(text, callback_data=callback)] for text, callback in buttons])

# –ö–æ–º–∞–Ω–¥—ã –∏ –º–µ–Ω—é
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Valture ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –≥–µ–π–º–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ü–µ–Ω—è—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å!\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é.",
        reply_markup=get_keyboard([("üìã –ú–µ–Ω—é", "menu_main")])
    )

async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    buttons = [
        ("üí≥ –û–ø–ª–∞—Ç–∞", "menu_pay"),
        ("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", "menu_support"),
        ("‚ùì FAQ", "menu_faq"),
        ("‚ÑπÔ∏è –û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏", "menu_about"),
    ]
    await query.edit_message_text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=get_keyboard(buttons))

async def about(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "‚ú® *–û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ Valture*\n\n"
        "‚úÖ +20‚Äì30% FPS\n"
        "‚úÖ –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Ñ—Ä–µ–π–º—Ä–µ–π—Ç–∞\n"
        "‚úÖ –û—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã\n"
        "‚úÖ –£–º–µ–Ω—å—à–µ–Ω–∏–µ –∑–∞–¥–µ—Ä–∂–µ–∫\n"
        "‚úÖ –ü–ª–∞–≤–Ω–æ—Å—Ç—å –∏ —á–µ—Ç–∫–æ—Å—Ç—å –º—ã—à–∏\n"
        "‚úÖ –ü–ª–∞–≤–Ω–æ—Å—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∏ –≤ –∏–≥—Ä–∞—Ö\n"
        "‚úÖ –ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Windows\n\n"
        "_–°–æ–∑–¥–∞–Ω–æ –¥–ª—è –≥–µ–π–º–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ü–µ–Ω—è—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å._"
    )
    query = update.callback_query
    await query.answer()
    buttons = [
        ("üí≥ –û–ø–ª–∞—Ç–∞", "menu_pay"),
        ("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", "menu_support"),
        ("‚ùì FAQ", "menu_faq"),
    ]
    await query.edit_message_text(text, parse_mode="Markdown", reply_markup=get_keyboard(buttons))

async def pay(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "üí≥ *–û–ø–ª–∞—Ç–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏ Valture*\n\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ª–∏—Ü–µ–Ω–∑–∏—è –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã—Å–ª–∞–Ω–∞ –≤–∞–º –≤ —á–∞—Ç.\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é."
    )
    query = update.callback_query
    await query.answer()
    buttons = [
        ("–ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á (—Ç–µ—Å—Ç)", "pay_confirm"),
        ("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "menu_main"),
    ]
    await query.edit_message_text(text, parse_mode="Markdown", reply_markup=get_keyboard(buttons))

async def support(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "üìû *–ü–æ–¥–¥–µ—Ä–∂–∫–∞*\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞—à–µ–º—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n\n"
        "@s3pt1ck"
    )
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(text, parse_mode="Markdown", reply_markup=get_keyboard([("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "menu_main")]))

async def faq(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "‚ùì *–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã (FAQ)*\n\n"
        "1Ô∏è‚É£ *–ö–∞–∫ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Valture?*\n"
        "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, —Å–ª–µ–¥—É—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –∏–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞.\n\n"
        "2Ô∏è‚É£ *–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é?*\n"
        "–õ–∏—Ü–µ–Ω–∑–∏—è –≤—ã–¥–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –∏–ª–∏ –ø–æ —Ç–µ—Å—Ç–æ–≤–æ–π –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ.\n\n"
        "3Ô∏è‚É£ *–ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã?*\n"
        "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É —á–µ—Ä–µ–∑ –º–µ–Ω—é –∏–ª–∏ –Ω–∞–ø—Ä—è–º—É—é @s3pt1ck."
    )
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(text, parse_mode="Markdown", reply_markup=get_keyboard([("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "menu_main")]))

async def pay_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    license_key = generate_license()
    try:
        user = query.from_user
        username = f"@{user.username}" if user.username else "no_username"
        append_license_to_sheet(license_key, username)
        now_str = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

        logging.info(f"–ö–ª—é—á: {license_key} ({now_str})")
        logging.info(f"–í—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {username} (ID: {user.id})")

        await query.edit_message_text(
            f"‚úÖ –í–∞—à–∞ –ª–∏—Ü–µ–Ω–∑–∏—è:\n`{license_key}`\n\n"
            "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –¥–æ–≤–µ—Ä—è–µ—Ç–µ –Ω–∞–º! –ñ–µ–ª–∞–µ–º —É—Å–ø–µ—Ö–æ–≤ –≤ –∏–≥—Ä–∞—Ö –∏ –Ω–æ–≤—ã—Ö –ø–æ–±–µ–¥! üéÆ",
            parse_mode="Markdown",
            reply_markup=get_keyboard([("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "menu_main")])
        )
    except Exception:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –ª–∏—Ü–µ–Ω–∑–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data

    if data == "menu_main":
        await main_menu(update, context)
    elif data == "menu_pay":
        await pay(update, context)
    elif data == "menu_support":
        await support(update, context)
    elif data == "menu_faq":
        await faq(update, context)
    elif data == "menu_about":
        await about(update, context)
    elif data == "pay_confirm":
        await pay_confirm(update, context)

# üöÄ –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    keep_alive()  # üü¢ –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞, —á—Ç–æ–±—ã Replit –Ω–µ —Å–ø–∞–ª
    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.run_polling()
