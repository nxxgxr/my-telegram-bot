import telebot
from telebot import types
import requests
import os
import random
import string
from datetime import datetime, timezone, timedelta
import gspread
from google.oauth2.service_account import Credentials
import logging
import time
from flask import Flask, request, jsonify
from threading import Thread
from uuid import uuid4
from yookassa import Configuration, Payment

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
TOKEN = os.environ.get("BOT_TOKEN", '7941872387:AAGZayILmna-qHHyQy5V50wDGylo3yFCZ0A')
CRYPTOBOT_API_TOKEN = os.environ.get("CRYPTOBOT_API_TOKEN", '406690:AA0uW0MoZHwZ1CnAvw1zn3lcx7lNKnbT24w')
YOOKASSA_SHOP_ID = os.environ.get("YOOKASSA_SHOP_ID")
YOOKASSA_SECRET_KEY = os.environ.get("YOOKASSA_SECRET_KEY")
CREDS_FILE = os.environ.get("CREDS_FILE", "valture-license-bot-account.json")
SPREADSHEET_NAME = os.environ.get("SPREADSHEET_NAME", "Valture_Licenses")
TEST_PAYMENT_AMOUNT = 0.01  # TON for CryptoBot
YOOKASSA_AMOUNT = 1000.0  # RUB for YooKassa

SCOPE = [
    "https://www.googleapis.com/auth/spreadsheets",
    "https://www.googleapis.com/auth/drive",
]

CRYPTO_BOT_API = "https://pay.crypt.bot/api"

# Configure YooKassa
if YOOKASSA_SHOP_ID and YOOKASSA_SECRET_KEY:
    Configuration.account_id = YOOKASSA_SHOP_ID
    Configuration.secret_key = YOOKASSA_SECRET_KEY

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.DEBUG
)
logger = logging.getLogger(__name__)

# --- Flask –¥–ª—è keep-alive –∏ –≤–µ–±—Ö—É–∫–æ–≤ ---
app = Flask(__name__)

@app.route('/')
def home():
    return "‚úÖ Valture –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

@app.route('/yookassa-webhook', methods=['POST'])
def yookassa_webhook():
    try:
        event_json = request.get_json()
        logger.debug(f"YooKassa webhook received: {event_json}")
        
        if not event_json or 'event' not in event_json or 'object' not in event_json:
            logger.error("Invalid webhook payload")
            return jsonify({"status": "error", "message": "Invalid payload"}), 400

        event = event_json['event']
        payment_object = event_json['object']
        
        if event == 'payment.succeeded':
            payment_id = payment_object['id']
            metadata = payment_object.get('metadata', {})
            user_id = metadata.get('user_id')
            username = metadata.get('username')
            
            if not user_id or not username:
                logger.error(f"Missing metadata: user_id={user_id}, username={username}")
                return jsonify({"status": "error", "message": "Missing metadata"}), 400

            # Process payment synchronously for simplicity
            try:
                license_key = generate_license()
                append_license_to_sheet(license_key, username)
                bot.send_message(
                    chat_id=user_id,
                    text=(
                        "üéâ *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–∫—É–ø–∫–æ–π!*\n\n"
                        f"–í–∞—à –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–π –∫–ª—é—á:\n`{license_key}`\n\n"
                        "–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –µ–≥–æ! üöÄ"
                    ),
                    parse_mode="Markdown"
                )
                logger.info(f"YooKassa payment processed: {license_key} for {username}")
            except Exception as e:
                logger.error(f"Error processing YooKassa payment {payment_id}: {e}")
                bot.send_message(
                    chat_id=user_id,
                    text=(
                        "‚ùå *–û—à–∏–±–∫–∞!*\n\n"
                        "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–∞—Ç—å –∫–ª—é—á. –°–≤—è–∂–∏—Ç–µ—Å—å —Å @s3pt1ck."
                    ),
                    parse_mode="Markdown"
                )
            return jsonify({"status": "ok"}), 200
        
        elif event == 'payment.canceled':
            logger.warning(f"YooKassa payment canceled: {payment_object['id']}")
            return jsonify({"status": "ok"}), 200
        
        return jsonify({"status": "ignored"}), 200
    
    except Exception as e:
        logger.error(f"Error in YooKassa webhook: {e}")
        return jsonify({"status": "error", "message": str(e)}), 500

def run_flask():
    port = int(os.environ.get("PORT", 8080))
    app.run(host="0.0.0.0", port=port)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ---
bot = telebot.TeleBot(TOKEN)

invoices = {}
sheet_cache = None

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ Google Credentials ---
def setup_google_creds():
    logger.debug("–ü—Ä–æ–≤–µ—Ä–∫–∞ Google credentials...")
    if not os.path.exists(CREDS_FILE):
        logger.error(f"–§–∞–π–ª —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö {CREDS_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        raise FileNotFoundError(f"–§–∞–π–ª {CREDS_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–∞–π–ª —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {CREDS_FILE}")

def get_sheet():
    global sheet_cache
    if sheet_cache is None:
        try:
            setup_google_creds()
            creds = Credentials.from_service_account_file(CREDS_FILE, scopes=SCOPE)
            client = gspread.authorize(creds)
            sheet_cache = client.open(SPREADSHEET_NAME).sheet1
            logger.info(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Google Sheet: {SPREADSHEET_NAME}")
        except gspread.exceptions.SpreadsheetNotFound:
            logger.error(f"Google Sheet '{SPREADSHEET_NAME}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            raise
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets: {str(e)}")
            raise
    return sheet_cache

def generate_license(length=32):
    try:
        key = ''.join(random.choices(string.ascii_uppercase + string.digits, k=length))
        logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω HWID-–∫–ª—é—á: {key}")
        return key
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–∞: {str(e)}")
        raise

def append_license_to_sheet(license_key, username, retries=3, delay=2):
    for attempt in range(1, retries + 1):
        try:
            sheet = get_sheet()
            utc_plus_2 = timezone(timedelta(hours=2))
            now_utc_plus_2 = datetime.now(utc_plus_2)
            now_str = now_utc_plus_2.strftime("%Y-%m-%d %H:%M:%S")
            sheet.append_row([license_key, "", username, now_str])
            logger.info(f"HWID-–∫–ª—é—á {license_key} –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è {username}")
            return True
        except Exception as e:
            logger.error(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt}/{retries} –Ω–µ —É–¥–∞–ª–∞—Å—å: {str(e)}")
            if attempt < retries:
                time.sleep(delay)
    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á {license_key} –ø–æ—Å–ª–µ {retries} –ø–æ–ø—ã—Ç–æ–∫")
    return False

def create_crypto_invoice(amount, asset="TON", description="Valture License"):
    logger.debug(f"–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞: amount={amount}, asset={asset}")
    if not CRYPTOBOT_API_TOKEN:
        logger.error("CRYPTOBOT_API_TOKEN –Ω–µ –∑–∞–¥–∞–Ω")
        return None, "CRYPTOBOT_API_TOKEN –Ω–µ –∑–∞–¥–∞–Ω"
    try:
        payload = {
            "amount": str(amount),
            "asset": asset,
            "description": description,
            "order_id": str(uuid4())
        }
        headers = {
            "Crypto-Pay-API-Token": CRYPTOBOT_API_TOKEN,
            "Content-Type": "application/json"
        }
        response = requests.post(f"{CRYPTO_BOT_API}/createInvoice", json=payload, headers=headers, timeout=10)
        logger.debug(f"HTTP —Å—Ç–∞—Ç—É—Å: {response.status_code}, –û—Ç–≤–µ—Ç: {response.text}")
        response.raise_for_status()
        data = response.json()
        if data.get("ok"):
            logger.info(f"–ò–Ω–≤–æ–π—Å —Å–æ–∑–¥–∞–Ω: invoice_id={data['result']['invoice_id']}")
            return data["result"], None
        else:
            error_msg = data.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
            logger.error(f"–û—à–∏–±–∫–∞ API CryptoBot: {error_msg}")
            return None, f"–û—à–∏–±–∫–∞ API: {error_msg}"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞: {e}")
        return None, f"–û—à–∏–±–∫–∞: {str(e)}"

def check_invoice_status(invoice_id):
    logger.debug(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–≤–æ–π—Å–∞: invoice_id={invoice_id}")
    try:
        headers = {"Crypto-Pay-API-Token": CRYPTOBOT_API_TOKEN}
        response = requests.get(f"{CRYPTO_BOT_API}/getInvoices?invoice_ids={invoice_id}", headers=headers, timeout=10)
        logger.debug(f"HTTP —Å—Ç–∞—Ç—É—Å: {response.status_code}, –û—Ç–≤–µ—Ç: {response.text}")
        response.raise_for_status()
        data = response.json()
        if data.get("ok"):
            status = data["result"]["items"][0]["status"]
            logger.info(f"–°—Ç–∞—Ç—É—Å –∏–Ω–≤–æ–π—Å–∞ {invoice_id}: {status}")
            return status
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {data.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω–≤–æ–π—Å–∞: {e}")
        return None

def create_yookassa_payment(amount, description, user_id, username):
    logger.debug(f"–°–æ–∑–¥–∞–Ω–∏–µ YooKassa –ø–ª–∞—Ç–µ–∂–∞: amount={amount}, user_id={user_id}")
    if not YOOKASSA_SHOP_ID or not YOOKASSA_SECRET_KEY:
        logger.error("YOOKASSA_SHOP_ID –∏–ª–∏ YOOKASSA_SECRET_KEY –Ω–µ –∑–∞–¥–∞–Ω—ã")
        return None, "YooKassa credentials not configured"
    try:
        idempotence_key = str(uuid4())
        payment = Payment.create({
            "amount": {
                "value": f"{amount:.2f}",
                "currency": "RUB"
            },
            "confirmation": {
                "type": "redirect",
                "return_url": "https://t.me/valture_buy_bot"
            },
            "capture": True,
            "description": description,
            "metadata": {
                "user_id": str(user_id),
                "username": username
            }
        }, idempotence_key)
        logger.info(f"YooKassa –ø–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω: payment_id={payment.id}")
        return payment, None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è YooKassa –ø–ª–∞—Ç–µ–∂–∞: {e}")
        return None, f"YooKassa –æ—à–∏–±–∫–∞: {str(e)}"

# --- –õ–æ–≥–∏–∫–∞ –±–æ—Ç–∞ ---
@bot.message_handler(commands=['start'])
def welcome(message):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='menu_main'))
    bot.send_message(
        message.chat.id,
        (
            "üéÆ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Valture!*\n\n"
            "–í–∞—à –ª—É—á—à–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∏–≥—Ä–æ–≤–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏! üöÄ\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:"
        ),
        parse_mode="Markdown",
        reply_markup=markup
    )

@bot.message_handler(commands=['test_sheets'])
def test_sheets(message):
    try:
        sheet = get_sheet()
        test_key = "TEST_KEY_" + str(int(time.time()))
        sheet.append_row([test_key, "", "test_user", datetime.now().strftime("%Y-%m-%d %H:%M:%S")])
        bot.reply_to(message, f"–£—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –∫–ª—é—á {test_key}!")
        logger.info(f"–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å {test_key} –¥–æ–±–∞–≤–ª–µ–Ω–∞")
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Google Sheets: {str(e)}"
        bot.reply_to(message, error_msg)
        logger.error(error_msg)

@bot.callback_query_handler(func=lambda call: True)
def button_handler(call):
    data = call.data
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    username = call.from_user.username or call.from_user.first_name

    if data == "menu_main":
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton(text="‚ÑπÔ∏è –û Valture", callback_data='menu_about'))
        markup.add(types.InlineKeyboardButton(text="üí≥ –ö—É–ø–∏—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é", callback_data='menu_pay'))
        markup.add(types.InlineKeyboardButton(text="‚ùì FAQ", callback_data='menu_faq'))
        markup.add(types.InlineKeyboardButton(text="üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data='menu_support'))
        bot.edit_message_text(
            "üè† *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
            chat_id=chat_id,
            message_id=message_id,
            parse_mode="Markdown",
            reply_markup=markup
        )

    elif data == "menu_about":
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='menu_main'))
        bot.edit_message_text(
            (
                "‚ú® *Valture ‚Äî –í–∞—à –ø—É—Ç—å –∫ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤—É –≤ –∏–≥—Ä–∞—Ö*\n\n"
                "Valture ‚Äî –ø–µ—Ä–µ–¥–æ–≤–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –≥–µ–π–º–µ—Ä–æ–≤.\n"
                "üî• *–ü–æ—á–µ–º—É –≤—ã–±–∏—Ä–∞—é—Ç Valture?*\n"
                "üöÄ +20‚Äì30% FPS\n"
                "üõ°Ô∏è –°—Ç–∞–±–∏–ª—å–Ω—ã–π —Ñ—Ä–µ–π–º—Ä–µ–π—Ç\n"
                "üí° –ú–æ–ª–Ω–∏–µ–Ω–æ—Å–Ω–∞—è –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç—å\n"
                "üîã –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è Windows\n"
                "üñ•Ô∏è –ü–ª–∞–≤–Ω–æ—Å—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∏\n"
                "_–°–æ–∑–¥–∞–Ω–æ –¥–ª—è –ø–æ–±–µ–¥—ã._"
            ),
            chat_id=chat_id,
            message_id=message_id,
            parse_mode="Markdown",
            reply_markup=markup
        )

    elif data == "menu_pay":
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton(text="üí∏ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ CryptoBot", callback_data='pay_crypto'))
        markup.add(types.InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ YooKassa", callback_data='pay_yookassa'))
        markup.add(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='menu_main'))
        bot.edit_message_text(
            (
                "üí≥ *–ü–æ–∫—É–ø–∫–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏ Valture*\n\n"
                "–¶–µ–Ω–∞: *4 TON* –∏–ª–∏ *1000 RUB (~$12.7)*\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:\n"
                "- *CryptoBot*: –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É.\n"
                "- *YooKassa*: –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π.\n\n"
                "–ö–ª—é—á –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã."
            ),
            chat_id=chat_id,
            message_id=message_id,
            parse_mode="Markdown",
            reply_markup=markup
        )

    elif data == "pay_crypto":
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data='pay_crypto_confirm'))
        markup.add(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã", callback_data='menu_pay'))
        bot.edit_message_text(
            (
                "üí∏ *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã CryptoBot*\n\n"
                "–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –æ–ø–ª–∞—Ç–∏—Ç—å *4 TON* –∑–∞ –ª–∏—Ü–µ–Ω–∑–∏—é Valture.\n"
                "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–ø–ª–∞—Ç—É?"
            ),
            chat_id=chat_id,
            message_id=message_id,
            parse_mode="Markdown",
            reply_markup=markup
        )

    elif data == "pay_crypto_confirm":
        try:
            invoice, error = create_crypto_invoice(amount=TEST_PAYMENT_AMOUNT)
            if not invoice:
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data='pay_crypto'))
                markup.add(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã", callback_data='menu_pay'))
                bot.edit_message_text(
                    (
                        "‚ùå *–û—à–∏–±–∫–∞!*\n\n"
                        f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–Ω–≤–æ–π—Å: {error or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}.\n"
                        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @s3pt1ck."
                    ),
                    chat_id=chat_id,
                    message_id=message_id,
                    parse_mode="Markdown",
                    reply_markup=markup
                )
                return

            invoice_id = invoice["invoice_id"]
            pay_url = invoice["pay_url"]
            invoices[chat_id] = {'invoice_id': invoice_id, 'username': username, 'payment_type': 'crypto'}
            logger.info(f"–ò–Ω–≤–æ–π—Å —Å–æ–∑–¥–∞–Ω: invoice_id={invoice_id}, pay_url={pay_url}")

            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å 4 TON", url=pay_url))
            markup.add(types.InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data='pay_verify'))
            markup.add(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã", callback_data='menu_pay'))
            bot.edit_message_text(
                (
                    "üí∏ *–û–ø–ª–∞—Ç–∏—Ç–µ —á–µ—Ä–µ–∑ CryptoBot*\n\n"
                    "–ù–∞–∂–º–∏—Ç–µ –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã *4 TON*:\n"
                    f"[–û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ CryptoBot]({pay_url})\n\n"
                    "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–∏–∂–µ."
                ),
                chat_id=chat_id,
                message_id=message_id,
                parse_mode="Markdown",
                reply_markup=markup,
                disable_web_page_preview=True
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞: {e}")
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data='pay_crypto'))
            markup.add(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã", callback_data='menu_pay'))
            bot.edit_message_text(
                (
                    "‚ùå *–û—à–∏–±–∫–∞!*\n\n"
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å. –°–≤—è–∂–∏—Ç–µ—Å—å —Å @s3pt1ck."
                ),
                chat_id=chat_id,
                message_id=message_id,
                parse_mode="Markdown",
                reply_markup=markup
            )

    elif data == "pay_yookassa":
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data='pay_yookassa_confirm'))
        markup.add(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã", callback_data='menu_pay'))
        bot.edit_message_text(
            (
                "üí≥ *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã YooKassa*\n\n"
                "–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –æ–ø–ª–∞—Ç–∏—Ç—å *1000 RUB* –∑–∞ –ª–∏—Ü–µ–Ω–∑–∏—é Valture.\n"
                "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–ø–ª–∞—Ç—É?"
            ),
            chat_id=chat_id,
            message_id=message_id,
            parse_mode="Markdown",
            reply_markup=markup
        )

    elif data == "pay_yookassa_confirm":
        try:
            payment, error = create_yookassa_payment(
                amount=YOOKASSA_AMOUNT,
                description="Valture License",
                user_id=call.from_user.id,
                username=username
            )
            if not payment:
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data='pay_yookassa'))
                markup.add(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã", callback_data='menu_pay'))
                bot.edit_message_text(
                    (
                        "‚ùå *–û—à–∏–±–∫–∞!*\n\n"
                        f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂: {error or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}.\n"
                        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @s3pt1ck."
                    ),
                    chat_id=chat_id,
                    message_id=message_id,
                    parse_mode="Markdown",
                    reply_markup=markup
                )
                return

            payment_id = payment.id
            confirmation_url = payment.confirmation.confirmation_url
            invoices[chat_id] = {'payment_id': payment_id, 'username': username, 'payment_type': 'yookassa'}
            logger.info(f"YooKassa –ø–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω: payment_id={payment_id}")

            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å 1000 RUB", url=confirmation_url))
            markup.add(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã", callback_data='menu_pay'))
            bot.edit_message_text(
                (
                    "üí≥ *–û–ø–ª–∞—Ç–∏—Ç–µ —á–µ—Ä–µ–∑ YooKassa*\n\n"
                    "–ù–∞–∂–º–∏—Ç–µ –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã *1000 RUB*:\n"
                    f"[–û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ YooKassa]({confirmation_url})\n\n"
                    "–ö–ª—é—á –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã."
                ),
                chat_id=chat_id,
                message_id=message_id,
                parse_mode="Markdown",
                reply_markup=markup,
                disable_web_page_preview=True
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è YooKassa –ø–ª–∞—Ç–µ–∂–∞: {e}")
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data='pay_yookassa'))
            markup.add(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã", callback_data='menu_pay'))
            bot.edit_message_text(
                (
                    "‚ùå *–û—à–∏–±–∫–∞!*\n\n"
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å. –°–≤—è–∂–∏—Ç–µ—Å—å —Å @s3pt1ck."
                ),
                chat_id=chat_id,
                message_id=message_id,
                parse_mode="Markdown",
                reply_markup=markup
            )

    elif data == "pay_verify":
        if chat_id not in invoices or invoices[chat_id]['payment_type'] != 'crypto':
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã", callback_data='menu_pay'))
            bot.edit_message_text(
                (
                    "‚ùå *–û—à–∏–±–∫–∞!*\n\n"
                    "–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è CryptoBot. YooKassa –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
                ),
                chat_id=chat_id,
                message_id=message_id,
                parse_mode="Markdown",
                reply_markup=markup
            )
            return

        invoice_id = invoices[chat_id]['invoice_id']
        username = invoices[chat_id]['username']

        try:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã", callback_data='menu_pay'))
            bot.edit_message_text(
                "‚è≥ *–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã...*\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.",
                chat_id=chat_id,
                message_id=message_id,
                parse_mode="Markdown",
                reply_markup=markup
            )

            status = check_invoice_status(invoice_id)
            if status == "paid":
                hwid_key = generate_license()
                sheet_success = append_license_to_sheet(hwid_key, username)
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton(text="üè† –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='menu_main'))
                if sheet_success:
                    bot.edit_message_text(
                        (
                            "üéâ *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–∫—É–ø–∫–æ–π!*\n\n"
                            f"HWID-–∫–ª—é—á:\n`{hwid_key}`\n\n–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –µ–≥–æ! üöÄ"
                        ),
                        chat_id=chat_id,
                        message_id=message_id,
                        parse_mode="Markdown",
                        reply_markup=markup
                    )
                else:
                    bot.edit_message_text(
                        (
                            "üéâ *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–∫—É–ø–∫–æ–π!*\n\n"
                            f"HWID-–∫–ª—é—á:\n`{hwid_key}`\n\n–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –µ–≥–æ! üöÄ\n\n"
                            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –∫–ª—é—á –≤ —Ç–∞–±–ª–∏—Ü—É. –°–≤—è–∂–∏—Ç–µ—Å—å —Å @s3pt1ck."
                        ),
                        chat_id=chat_id,
                        message_id=message_id,
                        parse_mode="Markdown",
                        reply_markup=markup
                    )
                logger.info(f"–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞: {hwid_key} –¥–ª—è {username}")
                del invoices[chat_id]
            else:
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data='pay_verify'))
                markup.add(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã", callback_data='menu_pay'))
                bot.edit_message_text(
                    (
                        "‚è≥ *–û–ø–ª–∞—Ç–∞ –µ—â–µ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞*\n\n"
                        "–ó–∞–≤–µ—Ä—à–∏—Ç–µ –æ–ø–ª–∞—Ç—É –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. –°–≤—è–∂–∏—Ç–µ—Å—å —Å @s3pt1ck."
                    ),
                    chat_id=chat_id,
                    message_id=message_id,
                    parse_mode="Markdown",
                    reply_markup=markup
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã: {e}")
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data='pay_verify'))
            markup.add(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã", callback_data='menu_pay'))
            bot.edit_message_text(
                (
                    "‚ùå *–û—à–∏–±–∫–∞!*\n\n"
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É. –°–≤—è–∂–∏—Ç–µ—Å—å —Å @s3pt1ck."
                ),
                chat_id=chat_id,
                message_id=message_id,
                parse_mode="Markdown",
                reply_markup=markup
            )

    elif data == "menu_faq":
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='menu_main'))
        bot.edit_message_text(
            (
                "‚ùì *FAQ*\n\n"
                "1. –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é?\n"
                "- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–ö—É–ø–∏—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é' –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã.\n\n"
                "2. –ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ –∫–ª—é—á –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç?\n"
                "- –°–≤—è–∂–∏—Ç–µ—Å—å —Å @s3pt1ck.\n\n"
                "3. –ú–æ–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö?\n"
                "- –ù–µ—Ç, –∫–ª—é—á –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –æ–¥–Ω–æ–º—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É."
            ),
            chat_id=chat_id,
            message_id=message_id,
            parse_mode="Markdown",
            reply_markup=markup
        )

    elif data == "menu_support":
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='menu_main'))
        bot.edit_message_text(
            (
                "üìû *–ü–æ–¥–¥–µ—Ä–∂–∫–∞ Valture*\n\n"
                "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–ø—Ä–æ—Å—ã, –ø–∏—à–∏—Ç–µ: @s3pt1ck"
            ),
            chat_id=chat_id,
            message_id=message_id,
            parse_mode="Markdown",
            reply_markup=markup
        )

    bot.answer_callback_query(call.id)

if __name__ == '__main__':
    Thread(target=run_flask).start()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    bot.polling(non_stop=True)
