import telebot
from telebot import types
import requests
import os
import secrets
import base64
from datetime import datetime, timezone, timedelta
import gspread
from google.oauth2.service_account import Credentials
import logging

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---

TOKEN = os.environ.get("BOT_TOKEN", '7941872387:AAGZayILmna-qHHyQy5V50wDGylo3yFCZ0A')
CRYPTOBOT_API_TOKEN = os.environ.get("CRYPTOBOT_API_TOKEN", '406690:AA0uW0MoZHwZ1CnAvw1zn3lcx7lNKnbT24w')
CREDS_FILE = os.environ.get("CREDS_FILE", "creds.json")
SPREADSHEET_NAME = os.environ.get("SPREADSHEET_NAME", "Valture_Licenses")
GOOGLE_CREDS_JSON_BASE64 = os.environ.get("GOOGLE_CREDS_JSON_BASE64")
TEST_PAYMENT_AMOUNT = 0.01  # –¶–µ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ –≤ TON

SCOPE = [
    "https://www.googleapis.com/auth/spreadsheets",
    "https://www.googleapis.com/auth/drive",
]

# CryptoBot API endpoint
CRYPTO_BOT_API = "https://pay.crypt.bot/api"

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.DEBUG
)
logger = logging.getLogger(__name__)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ---

bot = telebot.TeleBot(TOKEN)

invoices = {}
sheet_cache = None

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ Google Credentials ---

def setup_google_creds():
    """–î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ base64-–∫—Ä–µ–¥–µ–Ω—à–ª–æ–≤ Google –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞."""
    logger.debug("–ü—Ä–æ–≤–µ—Ä–∫–∞ Google credentials...")
    if GOOGLE_CREDS_JSON_BASE64:
        try:
            creds_json = base64.b64decode(GOOGLE_CREDS_JSON_BASE64).decode("utf-8")
            with open(CREDS_FILE, "w") as f:
                f.write(creds_json)
            logger.info("Google credentials —É—Å–ø–µ—à–Ω–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ Google credentials: {str(e)}", exc_info=True)
            raise
    elif not os.path.exists(CREDS_FILE):
        logger.error("–§–∞–π–ª Google credentials –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏ GOOGLE_CREDS_JSON_BASE64 –Ω–µ –∑–∞–¥–∞–Ω")
        raise FileNotFoundError("–§–∞–π–ª Google credentials –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏ GOOGLE_CREDS_JSON_BASE64 –Ω–µ –∑–∞–¥–∞–Ω")
    else:
        logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª Google credentials")

def get_sheet():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ Google Sheets."""
    global sheet_cache
    if sheet_cache is None:
        try:
            setup_google_creds()
            creds = Credentials.from_service_account_file(CREDS_FILE, scopes=SCOPE)
            client = gspread.authorize(creds)
            sheet_cache = client.open(SPREADSHEET_NAME).sheet1
            logger.info("–£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Google Sheets")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets: {str(e)}", exc_info=True)
            raise
    return sheet_cache

def generate_license(length=32):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ HWID-–∫–ª—é—á–∞."""
    try:
        key = ''.join(secrets.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789') for _ in range(length))
        logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω HWID-–∫–ª—é—á: {key}")
        return key
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–∞: {str(e)}", exc_info=True)
        raise

def append_license_to_sheet(license_key, username):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ HWID-–∫–ª—é—á–∞ –≤ Google Sheets."""
    try:
        sheet = get_sheet()
        utc_plus_2 = timezone(timedelta(hours=2))
        now_utc_plus_2 = datetime.now(utc_plus_2)
        now_str = now_utc_plus_2.strftime("%Y-%m-%d %H:%M:%S")
        sheet.append_row([license_key, "", username, now_str])
        logger.info(f"HWID-–∫–ª—é—á {license_key} –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è {username}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ HWID-–∫–ª—é—á–∞: {str(e)}", exc_info=True)
        raise

# --- –õ–æ–≥–∏–∫–∞ –±–æ—Ç–∞ ---

@bot.message_handler(commands=['start'])
def welcome(message):
    markup = types.InlineKeyboardMarkup()
    get_button = types.InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å", callback_data=f'get_{TEST_PAYMENT_AMOUNT}')
    markup.add(get_button)
    bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –¥–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä.", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('get_'))
def get_invoice(call):
    chat_id = call.message.chat.id
    amount = call.data.split('get_')[1]
    username = call.from_user.username or call.from_user.first_name
    pay_link, invoice_id = get_pay_link(amount)
    if pay_link and invoice_id:
        invoices[chat_id] = invoice_id 
        logger.info(f"–¢–µ—Å—Ç–æ–≤—ã–π –∏–Ω–≤–æ–π—Å —Å–æ–∑–¥–∞–Ω –¥–ª—è {username}: invoice_id={invoice_id}")
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton(text=f"–û–ø–ª–∞—Ç–∏—Ç—å {amount} TON", url=pay_link))
        markup.add(types.InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f'check_payment_{invoice_id}'))
        bot.send_message(chat_id, "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã –∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É'", reply_markup=markup)
    else:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Å—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É")
        bot.answer_callback_query(call.id, '–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É.', show_alert=True)

@bot.callback_query_handler(func=lambda call: call.data.startswith('check_payment_'))
def check_payment(call):
    chat_id = call.message.chat.id
    invoice_id = call.data.split('check_payment_')[1]
    username = call.from_user.username or call.from_user.first_name

    logger.debug(f"–ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–π –æ–ø–ª–∞—Ç—ã: chat_id={chat_id}, invoice_id={invoice_id}, username={username}")
    try:
        payment_status = check_payment_status(invoice_id)
        logger.debug(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–Ω–≤–æ–π—Å–∞: {payment_status}")
        if payment_status and payment_status.get('ok'):
            if 'items' in payment_status['result']:
                invoice = next((inv for inv in payment_status['result']['items'] if str(inv['invoice_id']) == invoice_id), None)
                if invoice:
                    status = invoice['status']
                    logger.debug(f"–°—Ç–∞—Ç—É—Å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–Ω–≤–æ–π—Å–∞ {invoice_id}: {status}")
                    if status == 'paid':
                        try:
                            hwid_key = generate_license()
                            try:
                                append_license_to_sheet(hwid_key, username)
                                logger.info(f"–£—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω HWID-–∫–ª—é—á {hwid_key} –≤ Google Sheets –¥–ª—è {username}")
                            except Exception as sheet_error:
                                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å HWID-–∫–ª—é—á –≤ Google Sheets: {str(sheet_error)}", exc_info=True)
                                bot.send_message(chat_id, f"–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!‚úÖ\n\n–í–∞—à HWID-–∫–ª—é—á:\n`{hwid_key}`\n\n–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –µ–≥–æ –≤ –Ω–∞–¥–µ–∂–Ω–æ–º –º–µ—Å—Ç–µ! üöÄ\n\n‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –∫–ª—é—á –≤ —Ç–∞–±–ª–∏—Ü—É. –°–≤—è–∂–∏—Ç–µ—Å—å —Å @s3pt1ck.", parse_mode="Markdown")
                            else:
                                bot.send_message(chat_id, f"–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!‚úÖ\n\n–í–∞—à HWID-–∫–ª—é—á:\n`{hwid_key}`\n\n–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –µ–≥–æ –≤ –Ω–∞–¥–µ–∂–Ω–æ–º –º–µ—Å—Ç–µ! üöÄ", parse_mode="Markdown")
                            logger.info(f"–¢–µ—Å—Ç–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, HWID-–∫–ª—é—á –≤—ã–¥–∞–Ω: {hwid_key} –¥–ª—è {username}")
                            if chat_id in invoices:
                                del invoices[chat_id]
                            bot.answer_callback_query(call.id)
                        except Exception as key_error:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ HWID-–∫–ª—é—á–∞: {str(key_error)}", exc_info=True)
                            bot.answer_callback_query(call.id, '–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å HWID-–∫–ª—é—á.', show_alert=True)
                    else:
                        logger.warning(f"–¢–µ—Å—Ç–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞: invoice_id={invoice_id}, —Å—Ç–∞—Ç—É—Å: {status}")
                        bot.answer_callback_query(call.id, '–û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞‚ùå', show_alert=True)
                else:
                    logger.error(f"–¢–µ—Å—Ç–æ–≤—ã–π —Å—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è invoice_id={invoice_id}")
                    bot.answer_callback_query(call.id, '–°—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.', show_alert=True)
            else:
                logger.error(f"–û—Ç–≤–µ—Ç API –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–∞ 'items': {payment_status}")
                bot.answer_callback_query(call.id, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã.', show_alert=True)
        else:
            logger.error(f"–û—à–∏–±–∫–∞ API –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç: {payment_status}")
            bot.answer_callback_query(call.id, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã.', show_alert=True)
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–ø–ª–∞—Ç—ã: {str(e)}", exc_info=True)
        bot.answer_callback_query(call.id, '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–ø–ª–∞—Ç—ã.', show_alert=True)

def get_pay_link(amount):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞ —á–µ—Ä–µ–∑ CryptoBot."""
    headers = {"Crypto-Pay-API-Token": CRYPTOBOT_API_TOKEN}
    data = {
        "asset": "TON",
        "amount": amount,
        "description": "Valture License"
    }
    try:
        response = requests.post(f'{CRYPTO_BOT_API}/createInvoice', headers=headers, json=data, timeout=10)
        logger.debug(f"–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–Ω–≤–æ–π—Å–∞: HTTP —Å—Ç–∞—Ç—É—Å: {response.status_code}, –û—Ç–≤–µ—Ç: {response.text}")
        if response.ok:
            response_data = response.json()
            logger.info(f"–¢–µ—Å—Ç–æ–≤—ã–π –∏–Ω–≤–æ–π—Å —Å–æ–∑–¥–∞–Ω: invoice_id={response_data['result']['invoice_id']}")
            return response_data['result']['pay_url'], response_data['result']['invoice_id']
        logger.error(f"–û—à–∏–±–∫–∞ API –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–Ω–≤–æ–π—Å–∞: {response.status_code}, {response.text}")
        return None, None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–Ω–≤–æ–π—Å–∞: {e}")
        return None, None

def check_payment_status(invoice_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω–≤–æ–π—Å–∞."""
    headers = {
        "Crypto-Pay-API-Token": CRYPTOBOT_API_TOKEN,
        "Content-Type": "application/json"
    }
    logger.debug(f"–ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–Ω–≤–æ–π—Å–∞: invoice_id={invoice_id}")
    try:
        response = requests.post(f'{CRYPTO_BOT_API}/getInvoices', headers=headers, json={}, timeout=10)
        logger.debug(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–Ω–≤–æ–π—Å–∞ {invoice_id}: HTTP —Å—Ç–∞—Ç—É—Å: {response.status_code}, –û—Ç–≤–µ—Ç: {response.text}")
        if response.ok:
            return response.json()
        logger.error(f"–û—à–∏–±–∫–∞ API –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–Ω–≤–æ–π—Å–∞: {response.status_code}, {response.text}")
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–Ω–≤–æ–π—Å–∞: {e}")
        return None

if __name__ == '__main__':
    logger.info("Valture –±–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    bot.polling(non_stop=True)
