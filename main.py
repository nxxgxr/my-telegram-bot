import os
import logging
import secrets
import json
from datetime import datetime, timezone, timedelta
from threading import Thread

from flask import Flask, request
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

import gspread
from google.oauth2.service_account import Credentials

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
BOT_TOKEN = os.environ.get("BOT_TOKEN") or "7941872387:AAGZayILmna-qHHyQy5V50wDGylo3yFCZ0A"
CREDS_FILE = "valture-license-bot-account.json"
SPREADSHEET_NAME = "valture"
CRYPTOBOT_BOT_USERNAME = "CryptoBot"  # –ù–µ –º–µ–Ω—è–π
PAYMENT_AMOUNT = "1000"
CRYPTO_CURRENCY = "TON"

SCOPE = [
    "https://www.googleapis.com/auth/spreadsheets",
    "https://www.googleapis.com/auth/drive",
]

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- Flask ---
app = Flask(__name__)
paid_users = {}

@app.route('/')
def home():
    return "‚úÖ Valture –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

@app.route('/cryptobot/webhook', methods=["POST"])
def cryptobot_webhook():
    data = request.json
    if not data:
        return "No data", 400

    try:
        if data["status"] == "success":
            user_id = int(data["user"]["id"])
            paid_users[user_id] = True
            logger.info(f"–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
        return "Error", 500

    return "OK", 200

# --- Google Sheets ---
sheet_cache = None

def get_sheet():
    global sheet_cache
    if sheet_cache is None:
        creds = Credentials.from_service_account_file(CREDS_FILE, scopes=SCOPE)
        client = gspread.authorize(creds)
        sheet_cache = client.open(SPREADSHEET_NAME).sheet1
    return sheet_cache

def generate_license(length=32):
    return ''.join(secrets.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789') for _ in range(length))

def append_license_to_sheet(license_key, username):
    sheet = get_sheet()
    utc_plus_2 = timezone(timedelta(hours=2))
    now_str = datetime.now(utc_plus_2).strftime("%Y-%m-%d %H:%M:%S")
    sheet.append_row([license_key, "", username, now_str])

def get_keyboard(buttons):
    return InlineKeyboardMarkup([[InlineKeyboardButton(text, callback_data=callback)] for text, callback in buttons])

# --- Telegram Handlers ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Valture!*",
        parse_mode="Markdown",
        reply_markup=get_keyboard([("üìã –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é", "menu_main")])
    )

async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    buttons = [
        ("‚ÑπÔ∏è –û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏", "menu_about"),
        ("üì∞ –ù–æ–≤–æ—Å—Ç–∏", "menu_news"),
        ("üí≥ –ö—É–ø–∏—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é", "menu_pay"),
        ("‚ùì FAQ", "menu_faq"),
        ("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", "menu_support"),
    ]
    await query.edit_message_text("üè† *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*", parse_mode="Markdown", reply_markup=get_keyboard(buttons))

async def pay(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    payment_link = f"https://t.me/{CRYPTOBOT_BOT_USERNAME}?start=payment_{user_id}"

    text = (
        f"üí≥ *–õ–∏—Ü–µ–Ω–∑–∏—è Valture ‚Äî {PAYMENT_AMOUNT}‚ÇΩ ({CRYPTO_CURRENCY})*\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã. –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–π –∫–ª—é—á –≤ —ç—Ç–æ—Ç —á–∞—Ç.\n\n"
        f"[–û–ü–õ–ê–¢–ò–¢–¨]({payment_link})"
    )

    buttons = [("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", "check_payment"), ("üîô –ù–∞–∑–∞–¥", "menu_main")]
    await query.edit_message_text(text, parse_mode="Markdown", reply_markup=get_keyboard(buttons), disable_web_page_preview=True)

async def check_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    username = query.from_user.username or query.from_user.full_name

    if paid_users.get(user_id):
        license_key = generate_license()
        append_license_to_sheet(license_key, username)
        await query.edit_message_text(
            f"üéâ *–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!*\n\n–í–∞—à –∫–ª—é—á:\n`{license_key}`",
            parse_mode="Markdown"
        )
    else:
        await query.edit_message_text(
            "‚è≥ *–û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.*\n\n–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –æ–ø–ª–∞—Ç–∏–ª–∏ –∏ –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø–∞—Ä—É –º–∏–Ω—É—Ç, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ \"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É\".",
            parse_mode="Markdown",
            reply_markup=get_keyboard([("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", "check_payment"), ("üîô –ù–∞–∑–∞–¥", "menu_main")])
        )

async def about(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    await update.callback_query.edit_message_text("‚ÑπÔ∏è –û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ Valture...", reply_markup=get_keyboard([("üîô –ù–∞–∑–∞–¥", "menu_main")]))

async def faq(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    await update.callback_query.edit_message_text("‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã", reply_markup=get_keyboard([("üîô –ù–∞–∑–∞–¥", "menu_main")]))

async def support(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    await update.callback_query.edit_message_text("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @s3pt1ck", reply_markup=get_keyboard([("üîô –ù–∞–∑–∞–¥", "menu_main")]))

async def news(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    await update.callback_query.edit_message_text("üì∞ –ù–æ–≤–æ—Å—Ç–∏ –ø–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç", reply_markup=get_keyboard([("üîô –ù–∞–∑–∞–¥", "menu_main")]))

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = update.callback_query.data
    handlers = {
        "menu_main": main_menu,
        "menu_pay": pay,
        "menu_about": about,
        "menu_news": news,
        "menu_support": support,
        "menu_faq": faq,
        "check_payment": check_payment
    }
    if data in handlers:
        await handlers[data](update, context)

# --- –ó–∞–ø—É—Å–∫ ---
if __name__ == "__main__":
    Thread(target=lambda: app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 8080)))).start()

    application = Application.builder().token(BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))

    print("‚úÖ –ë–æ—Ç Valture –∑–∞–ø—É—â–µ–Ω")
    application.run_polling()
