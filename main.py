import os
import logging
import secrets
import json
from flask import Flask, request
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from yookassa import Configuration, Payment
from threading import Thread

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
YOOKASSA_SHOP_ID = os.getenv("YOOKASSA_SHOP_ID", "1095145")
YOOKASSA_SECRET_KEY = os.getenv("YOOKASSA_SECRET_KEY", "live_Kqe5487dKG7PHL5fLOzBC0-jOWWXfxzrLHS2s0YWVz0")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ÆKassa
Configuration.account_id = YOOKASSA_SHOP_ID
Configuration.secret_key = YOOKASSA_SECRET_KEY

# Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)

@app.route('/')
def home():
    return "‚úÖ Valture –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

@app.route('/yookassa-webhook', methods=['POST'])
def yookassa_webhook():
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ /yookassa-webhook: {request.get_data(as_text=True)}")
    try:
        data = json.loads(request.get_data())
        event = data.get('event')
        logger.info(f"–°–æ–±—ã—Ç–∏–µ –æ—Ç YooKassa: {event}")
        if event == 'payment.succeeded':
            username = data.get('object', {}).get('metadata', {}).get('username')
            chat_id = data.get('object', {}).get('metadata', {}).get('chat_id')
            logger.info(f"–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω –¥–ª—è {username}, chat_id: {chat_id}")
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É HWID –∫–ª—é—á–∞
        return '', 200
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {str(e)}")
        return '', 400

@app.route('/test-payment')
def test_payment():
    try:
        payment_params = {
            "amount": {
                "value": "1000.00",
                "currency": "RUB"
            },
            "confirmation": {
                "type": "redirect",
                "return_url": "https://rabochij-production.up.railway.app/"
            },
            "capture": True,
            "description": "–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ –¥–ª—è Valture",
            "metadata": {
                "username": "test_user",
                "chat_id": "123456789"
            }
        }
        logger.info(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–ª–∞—Ç–µ–∂–∞: {json.dumps(payment_params, ensure_ascii=False)}")
        payment = Payment.create(payment_params, idempotence_key=secrets.token_hex(16))
        pay_url = payment.confirmation.confirmation_url
        logger.info(f"–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω, —Å—Å—ã–ª–∫–∞: {pay_url}")
        return f"–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É: {pay_url}"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: {str(e)}")
        return f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {str(e)}"

def run_flask():
    port = int(os.environ.get("PORT", 8080))
    app.run(host="0.0.0.0", port=port)

# Telegram —Ñ—É–Ω–∫—Ü–∏–∏
def get_keyboard(buttons):
    return InlineKeyboardMarkup([[InlineKeyboardButton(text, callback_data=callback)] for text, callback in buttons])

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Valture!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    await update.message.reply_text(text, reply_markup=get_keyboard([("üí≥ –ö—É–ø–∏—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é", "pay")]))

async def pay(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    try:
        amount_value = "1000.00"
        user = query.from_user
        username = user.username or str(user.id)
        chat_id = query.message.chat_id

        logger.info(f"–°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –¥–ª—è {username} –Ω–∞ —Å—É–º–º—É {amount_value}")
        payment_params = {
            "amount": {
                "value": amount_value,
                "currency": "RUB"
            },
            "confirmation": {
                "type": "redirect",
                "return_url": "https://rabochij-production.up.railway/"
            },
            "capture": True,
            "description": "–ü–æ–∫—É–ø–∫–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏ –¥–ª—è Valture",
            "metadata": {
                "username": username,
                "chat_id": str(chat_id)
            }
        }
        logger.debug(f"Payment params: {json.dumps(payment_params, ensure_ascii=False)}")

        payment = Payment.create(payment_params, idempotence_key=secrets.token_hex(16))
        pay_url = payment.confirmation.confirmation_url
        logger.info(f"–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω, —Å—Å—ã–ª–∫–∞: {pay_url}")

        await query.edit_message_text(
            f"–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n{pay_url}",
            disable_web_page_preview=True
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {str(e)}", exc_info=True)
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.\n"
            "–û–±African Contact: @valture_support_bot"
        )

async def callback_handler(update: Update, context: ContextTypes):
    query = update.callback_query
    if query.data == "pay":
        await pay(update, context)
    else:
        await query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞", show_alert=True)

def main():
    if not BOT_TOKEN:
        logger.error("BOT_TOKEN –Ω–µ —É–∫–∞–∑–∞–Ω!")
        return

    application = Application.builder().token(BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(callback_handler))

    flask_thread = Thread(target=run_flask, daemon=True)
    flask_thread.start()

    logger.info("Starting bot...")
    application.run_polling()

if __name__ == "__main__":
    main()
</xai_application>
