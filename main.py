import os
import logging
import requests
import base64
import json
from datetime import datetime, timezone, timedelta
from threading import Thread
from uuid import uuid4

from flask import Flask, request, jsonify
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

import gspread
from google.oauth2.service_account import Credentials
from yookassa import Configuration, Payment

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---

BOT_TOKEN = os.environ.get("BOT_TOKEN")  # Telegram bot token from @BotFather
CRYPTOBOT_API_TOKEN = os.environ.get("CRYPTOBOT_API_TOKEN")  # CryptoBot token from @CryptoBot
YOOKASSA_SHOP_ID = os.environ.get("YOOKASSA_SHOP_ID")  # YooKassa shop ID
YOOKASSA_SECRET_KEY = os.environ.get("YOOKASSA_SECRET_KEY")  # YooKassa secret key
CREDS_FILE = os.environ.get("CREDS_FILE", "creds.json")  # Path to Google credentials file
SPREADSHEET_NAME = os.environ.get("SPREADSHEET_NAME")  # Google Sheets spreadsheet name
GOOGLE_CREDS_JSON_BASE64 = os.environ.get("GOOGLE_CREDS_JSON_BASE64")  # Base64-encoded Google credentials
SCOPE = [
    "https://www.googleapis.com/auth/spreadsheets",
    "https://www.googleapis.com/auth/drive",
]

# CryptoBot API endpoint
CRYPTO_BOT_API = "https://pay.crypt.bot/api"

# Configure YooKassa
if YOOKASSA_SHOP_ID and YOOKASSA_SECRET_KEY:
    Configuration.account_id = YOOKASSA_SHOP_ID
    Configuration.secret_key = YOOKASSA_SECRET_KEY
else:
    logging.warning("YooKassa credentials not set. YooKassa payments disabled.")

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.DEBUG
)
logger = logging.getLogger(__name__)

# --- Flask –¥–ª—è keep-alive –∏ –≤–µ–±—Ö—É–∫–æ–≤ ---

app = Flask(__name__)

@app.route('/')
def home():
    return "‚úÖ Valture –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

@app.route('/test-crypto-api')
def test_crypto_api():
    """Debug endpoint to test CryptoBot API connectivity."""
    try:
        headers = {"Crypto-Pay-API-Token": CRYPTOBOT_API_TOKEN}
        response = requests.get(f"{CRYPTO_BOT_API}/getMe", headers=headers, timeout=10)
        logger.debug(f"CryptoBot API test response: status={response.status_code}, headers={response.headers}, content={response.content[:1000]}")
        return f"API Response: {response.json()}"
    except Exception as e:
        logger.error(f"Error testing CryptoBot API: {e}")
        return f"Error: {str(e)}"

@app.route('/yookassa-webhook', methods=['POST'])
def yookassa_webhook():
    """Handle YooKassa payment notifications."""
    try:
        event_json = request.get_json()
        logger.debug(f"YooKassa webhook received: {event_json}")
        
        if not event_json or 'event' not in event_json or 'object' not in event_json:
            logger.error("Invalid webhook payload")
            return jsonify({"status": "error", "message": "Invalid payload"}), 400

        event = event_json['event']
        payment_object = event_json['object']
        
        if event == 'payment.succeeded':
            payment_id = payment_object['id']
            metadata = payment_object.get('metadata', {})
            user_id = metadata.get('user_id')
            username = metadata.get('username')
            
            if not user_id or not username:
                logger.error(f"Missing metadata in webhook: user_id={user_id}, username={username}")
                return jsonify({"status": "error", "message": "Missing metadata"}), 400

            # Store payment confirmation for async processing
            from application import application
            job_queue = application.job_queue
            job_queue.run_once(
                process_yookassa_payment,
                0,
                context={
                    'payment_id': payment_id,
                    'user_id': int(user_id),
                    'username': username,
                    'chat_id': int(user_id)
                },
                name=f"yookassa_payment_{payment_id}"
            )
            logger.info(f"YooKassa payment succeeded: payment_id={payment_id}, user={username}")
            return jsonify({"status": "ok"}), 200
        
        elif event == 'payment.canceled':
            logger.warning(f"YooKassa payment canceled: payment_id={payment_object['id']}")
            return jsonify({"status": "ok"}), 200
        
        return jsonify({"status": "ignored"}), 200
    
    except Exception as e:
        logger.error(f"Error in YooKassa webhook: {e}", exc_info=True)
        return jsonify({"status": "error", "message": str(e)}), 500

async def process_yookassa_payment(context: ContextTypes.DEFAULT_TYPE):
    """Process confirmed YooKassa payment and issue license key."""
    job_context = context.job.context
    payment_id = job_context['payment_id']
    user_id = job_context['user_id']
    username = job_context['username']
    chat_id = job_context['chat_id']

    try:
        license_key = generate_license()
        append_license_to_sheet(license_key, username)
        text = (
            "üéâ *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–∫—É–ø–∫–æ–π!*\n\n"
            "–í–∞—à –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–π –∫–ª—é—á:\n"
            f"`{license_key}`\n\n"
            "–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –µ–≥–æ –≤ –Ω–∞–¥–µ–∂–Ω–æ–º –º–µ—Å—Ç–µ! üöÄ"
        )
        await context.bot.send_message(
            chat_id=chat_id,
            text=text,
            parse_mode="Markdown"
        )
        logger.info(f"YooKassa payment processed, key issued: {license_key} for {username}")
    except Exception as e:
        logger.error(f"Error processing YooKassa payment {payment_id}: {e}", exc_info=True)
        error_text = (
            "‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!*\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–∞—Ç—å –∫–ª—é—á. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @s3pt1ck."
        )
        await context.bot.send_message(
            chat_id=chat_id,
            text=error_text,
            parse_mode="Markdown"
        )

def run_flask():
    port = int(os.environ.get("PORT", 8080))
    app.run(host="0.0.0.0", port=port)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ Google Credentials ---

def setup_google_creds():
    """Decode base64 Google credentials and create a temporary file."""
    logger.debug("Checking Google credentials...")
    if GOOGLE_CREDS_JSON_BASE64:
        try:
            creds_json = base64.b64decode(GOOGLE_CREDS_JSON_BASE64).decode("utf-8")
            with open(CREDS_FILE, "w") as f:
                f.write(creds_json)
            logger.info("Google credentials decoded and saved to temporary file")
        except Exception as e:
            logger.error(f"Error decoding Google credentials: {e}")
            raise
    elif not os.path.exists(CREDS_FILE):
        logger.error("Google credentials file not found and GOOGLE_CREDS_JSON_BASE64 not set")
        raise FileNotFoundError("Google credentials file not found")
    else:
        logger.info("Using existing Google credentials file")

# --- –õ–æ–≥–∏–∫–∞ Telegram –±–æ—Ç–∞ ---

sheet_cache = None

def get_sheet():
    """Get cached Google Sheets object."""
    global sheet_cache
    if sheet_cache is None:
        try:
            setup_google_creds()
            creds = Credentials.from_service_account_file(CREDS_FILE, scopes=SCOPE)
            client = gspread.authorize(creds)
            sheet_cache = client.open(SPREADSHEET_NAME).sheet1
            logger.info("Connected to Google Sheets")
        except Exception as e:
            logger.error(f"Error connecting to Google Sheets: {e}")
            raise
    return sheet_cache

def generate_license():
    """Generate HWID key."""
    return str(uuid4())

def append_license_to_sheet(license_key, username):
    """Add license to Google Sheets."""
    try:
        sheet = get_sheet()
        utc_plus_2 = timezone(timedelta(hours=2))
        now_utc_plus_2 = datetime.now(utc_plus_2)
        now_str = now_utc_plus_2.strftime('%Y-%m-%d %H:%M:%S')
        sheet.append_row([license_key, "", username, now_str])
        logger.info(f"‚úÖ License {license_key} added for {username}")
    except Exception as e:
        logger.error(f"Error adding license: {e}")
        raise

def create_crypto_invoice(amount, asset="TON", description="HWID Key"):
    """Create a CryptoBot invoice."""
    logger.debug(f"Creating invoice: amount={amount}, asset={asset}, description={description}")
    if not CRYPTOBOT_API_TOKEN:
        logger.error("CRYPTOBOT_API_TOKEN not set")
        return None, "CRYPTOBOT_API_TOKEN not found. Check settings."

    try:
        payload = {
            "amount": str(amount),
            "asset": asset,
            "description": description,
            "order_id": str(uuid4()),
        }
        headers = {
            "Crypto-Pay-API-Token": CRYPTOBOT_API_TOKEN,
            "Content-Type": "application/json"
        }
        logger.debug(f"Sending request to {CRYPTO_BOT_API}/createInvoice with payload={payload}")
        
        response = requests.post(f"{CRYPTO_BOT_API}/createInvoice", json=payload, headers=headers, timeout=10)
        logger.debug(f"HTTP status: {response.status_code}, Content-Type: {response.headers.get('Content-Type')}, Response: {response.content[:1000]}")
        
        if not response.headers.get('Content-Type', '').lower().startswith('application/json'):
            logger.error(f"Non-JSON response: {response.content[:1000]}")
            return None, "Non-JSON response from CryptoBot. Check CRYPTOBOT_API_TOKEN."

        data = response.json()
        
        if not data.get("ok"):
            error_msg = data.get("error", "Unknown CryptoBot error")
            logger.error(f"CryptoBot API error: {error_msg}")
            return None, f"API error: {error_msg}"
            
        logger.info(f"Invoice created: invoice_id={data['result']['invoice_id']}")
        return data["result"], None

    except requests.exceptions.HTTPError as http_err:
        logger.error(f"HTTP error creating invoice: {http_err}, Response: {response.content[:1000]}")
        if response.status_code == 401:
            return None, "Invalid CRYPTOBOT_API_TOKEN"
        elif response.status_code == 429:
            return None, "CryptoBot API rate limit exceeded"
        return None, f"HTTP error: {http_err}"
    except requests.exceptions.Timeout:
        logger.error("Timeout accessing CryptoBot API")
        return None, "Request timeout to CryptoBot API"
    except requests.exceptions.RequestException as req_err:
        logger.error(f"Network error creating invoice: {req_err}")
        return None, f"Network error: {req_err}"
    except ValueError as e:
        logger.error(f"JSON decode error: {e}, content: {response.content[:1000]}")
        return None, "Invalid response from CryptoBot"
    except Exception as e:
        logger.error(f"General error creating invoice: {e}")
        return None, f"Error: {e}"

def check_invoice_status(invoice_id):
    """Check CryptoBot invoice status."""
    logger.debug(f"Checking invoice status: invoice_id={invoice_id}")
    if not invoice_id:
        logger.error("Invoice ID missing")
        return None, "Invoice ID missing"
    
    if not CRYPTOBOT_API_TOKEN:
        logger.error("CRYPTOBOT_API_TOKEN not set")
        return None, "CRYPTOBOT_API_TOKEN not set. Check settings."

    # Validate token format
    if not isinstance(CRYPTOBOT_API_TOKEN, str) or len(CRYPTOBOT_API_TOKEN) < 24 or ":" not in CRYPTOBOT_API_TOKEN:
        logger.error("CRYPTOBOT_API_TOKEN appears invalid")
        return None, "Invalid CRYPTOBOT_API_TOKEN. Get a new token from @CryptoBot."

    # Test token validity
    try:
        headers = {"Crypto-Pay-API-Token": CRYPTOBOT_API_TOKEN}
        test_response = requests.get(f"{CRYPTO_BOT_API}/getMe", headers=headers, timeout=5)
        if test_response.status_code == 401:
            logger.error("CRYPTOBOT_API_TOKEN invalid")
            return None, "Invalid CRYPTOBOT_API_TOKEN. Check settings."
        test_response.raise_for_status()
    except requests.exceptions.RequestException as e:
        logger.error(f"Token validation error: {e}")
        return None, f"Token validation error: {str(e)}. Check CRYPTOBOT_API_TOKEN."

    try:
        headers = {
            "Crypto-Pay-API-Token": CRYPTOBOT_API_TOKEN,
            "Content-Type": "application/json"
        }
        payload = {"invoice_ids": str(invoice_id)}
        response = requests.post(f"{CRYPTO_BOT_API}/getInvoices", json=payload, headers=headers, timeout=10)
        logger.debug(f"HTTP status: {response.status_code}, Headers: {response.headers}, Response: {response.content[:1000]}")

        # Check Content-Type
        content_type = response.headers.get('Content-Type', '').lower()
        if not content_type.startswith('application/json'):
            logger.error(f"Unexpected response type: {content_type}, content: {response.content[:1000]}")
            return None, f"Non-JSON response: {content_type}. Check CRYPTOBOT_API_TOKEN or contact @CryptoBot."

        # Try decoding response
        try:
            data = response.json()
        except ValueError as json_err:
            logger.error(f"JSON parsing error: {json_err}, content: {response.content[:1000]}")
            return None, f"JSON parsing error: {json_err}. Check CRYPTOBOT_API_TOKEN or contact @CryptoBot."

        if not data.get("ok"):
            error_msg = data.get("error", "Unknown CryptoBot error")
            logger.error(f"CryptoBot API error: {error_msg}")
            return None, f"API error: {error_msg}. Check invoice_id or contact @CryptoBot."

        items = data.get("result", {}).get("items", [])
        if not items:
            logger.error(f"Empty invoice list for invoice_id={invoice_id}")
            return None, "Invoice not found. Try again or create a new invoice."

        invoice = next((inv for inv in items if str(inv['invoice_id']) == invoice_id), None)
        if not invoice:
            logger.error(f"Invoice not found in response for invoice_id={invoice_id}")
            return None, "Invoice not found."

        status = invoice.get("status")
        if not status:
            logger.error(f"Invoice status missing for invoice_id={invoice_id}")
            return None, "Invoice status not found."

        logger.info(f"Invoice status {invoice_id}: {status}")
        return status, None

    except requests.exceptions.HTTPError as http_err:
        logger.error(f"HTTP error: {http_err}, Response: {response.content[:1000]}")
        if response.status_code == 401:
            return None, "Invalid CRYPTOBOT_API_TOKEN. Check settings."
        elif response.status_code == 404:
            return None, "Invoice not found on CryptoBot server."
        elif response.status_code == 429:
            return None, "CryptoBot API rate limit exceeded. Try later."
        return None, f"HTTP error: {http_err}. Contact @CryptoBot."
    except requests.exceptions.Timeout:
        logger.error("Timeout accessing CryptoBot API")
        return None, "Request timeout to CryptoBot API. Try again."
    except requests.exceptions.RequestException as req_err:
        logger.error(f"Network error checking invoice: {req_err}")
        return None, f"Network error: {req_err}. Check connection."
    except Exception as e:
        logger.error(f"General error checking invoice: {e}")
        return None, f"Error: {str(e)}. Contact @s3pt1ck."

def create_yookassa_payment(amount, description, user_id, username):
    """Create a YooKassa payment."""
    logger.debug(f"Creating YooKassa payment: amount={amount}, description={description}, user_id={user_id}")
    if not YOOKASSA_SHOP_ID or not YOOKASSA_SECRET_KEY:
        logger.error("YOOKASSA_SHOP_ID or YOOKASSA_SECRET_KEY not set")
        return None, "YooKassa credentials not configured"

    try:
        idempotence_key = str(uuid4())
        payment = Payment.create({
            "amount": {
                "value": f"{amount:.2f}",
                "currency": "RUB"
            },
            "confirmation": {
                "type": "redirect",
                "return_url": "https://t.me/valture_buy_bot"
            },
            "capture": True,
            "description": description,
            "metadata": {
                "user_id": str(user_id),
                "username": username
            }
        }, idempotence_key)

        logger.info(f"YooKassa payment created: payment_id={payment.id}")
        return payment, None

    except Exception as e:
        logger.error(f"Error creating YooKassa payment: {e}")
        return None, f"YooKassa error: {str(e)}"

def get_keyboard(buttons):
    """Create keyboard with buttons."""
    return InlineKeyboardMarkup([[InlineKeyboardButton(text, callback_data=callback)] for text, callback in buttons])

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Welcome message."""
    welcome_text = (
        "üéÆ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Valture!*\n\n"
        "–í–∞—à –ª—É—á—à–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∏–≥—Ä–æ–≤–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏! üöÄ\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:"
    )
    buttons = [("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "menu_main")]
    await update.message.reply_text(welcome_text, parse_mode="Markdown", reply_markup=get_keyboard(buttons))

async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Main menu."""
    query = update.callback_query
    await query.answer()
    buttons = [
        ("‚ÑπÔ∏è –û Valture", "menu_about"),
        ("üì∞ –ù–æ–≤–æ—Å—Ç–∏", "menu_news"),
        ("üí≥ –ö—É–ø–∏—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é", "menu_pay"),
        ("‚ùì FAQ", "menu_faq"),
        ("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", "menu_support"),
    ]
    await query.edit_message_text(
        "üè† *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        parse_mode="Markdown",
        reply_markup=get_keyboard(buttons)
    )

async def about(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """About Valture."""
    query = update.callback_query
    await query.answer()
    text = (
        "‚ú® *Valture ‚Äî –í–∞—à –ø—É—Ç—å –∫ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤—É –≤ –∏–≥—Ä–∞—Ö*\n\n"
        "Valture ‚Äî —ç—Ç–æ –ø–µ—Ä–µ–¥–æ–≤–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è –≥–µ–π–º–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –≥–æ—Ç–æ–≤—ã –º–∏—Ä–∏—Ç—å—Å—è —Å –∫–æ–º–ø—Ä–æ–º–∏—Å—Å–∞–º–∏. "
        "–ù–∞—à–∞ –º–∏—Å—Å–∏—è ‚Äî –≤—ã–≤–µ—Å—Ç–∏ –≤–∞—à—É –∏–≥—Ä–æ–≤—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å, –æ–±–µ—Å–ø–µ—á–∏–≤ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø–ª–∞–≤–Ω–æ—Å—Ç—å, "
        "—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∏ –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã. –° Valture –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ, –æ –∫–æ—Ç–æ—Ä–æ–º –≤—Å–µ–≥–¥–∞ –º–µ—á—Ç–∞–ª–∏.\n\n"
        "üî• *–ü–æ—á–µ–º—É –≤—ã–±–∏—Ä–∞—é—Ç Valture?*\n"
        "üöÄ –£–≤–µ–ª–∏—á–µ–Ω–∏–µ FPS –Ω–∞ 20‚Äì30%\n"
        "üõ°Ô∏è –°—Ç–∞–±–∏–ª—å–Ω—ã–π —Ñ—Ä–µ–π–º—Ä–µ–π—Ç\n"
        "üí° –ú–æ–ª–Ω–∏–µ–Ω–æ—Å–Ω–∞—è –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç—å\n"
        "üîã –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è Windows\n"
        "üõ≥Ô∏è –ü–ª–∞–≤–Ω–æ—Å—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n"
        "üñ•Ô∏è –ü–ª–∞–≤–Ω–æ—Å—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∏ –≤ –∏–≥—Ä–∞—Ö\n\n"
        "_–°–æ–∑–¥–∞–Ω–æ –¥–ª—è –≥–µ–π–º–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ü–µ–Ω—è—Ç –∫–∞—á–µ—Å—Ç–≤–æ –∏ —Å—Ç—Ä–µ–º—è—Ç—Å—è –∫ –ø–æ–±–µ–¥–µ._"
    )
    buttons = [("üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "menu_main")]
    await query.edit_message_text(text, parse_mode="Markdown", reply_markup=get_keyboard(buttons))

async def pay(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Payment menu."""
    query = update.callback_query
    await query.answer()
    text = (
        "üí≥ *–ü–æ–∫—É–ø–∫–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏ Valture*\n\n"
        "–¶–µ–Ω–∞: *4 TON* –∏–ª–∏ *1000 RUB*\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:\n"
        "- *CryptoBot*: –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É.\n"
        "- *YooKassa*: –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π.\n\n"
        "–ö–ª—é—á –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã."
    )
    buttons = [
        ("üí∏ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ CryptoBot", "pay_crypto"),
        ("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ YooKassa", "pay_yookassa"),
        ("üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "menu_main")
    ]
    await query.edit_message_text(text, parse_mode="Markdown", reply_markup=get_keyboard(buttons))

async def pay_crypto(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Initiate CryptoBot payment."""
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    username = query.from_user.username or query.from_user.full_name

    try:
        logger.debug(f"Creating CryptoBot invoice for user: {username} (ID: {user_id})")
        invoice, error = create_crypto_invoice(amount=4.0, asset="TON", description="HWID Key")
        if not invoice:
            error_msg = (
                "‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞!*\n\n"
                f"–ü—Ä–∏—á–∏–Ω–∞: {error or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}.\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ CRYPTOBOT_API_TOKEN –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @s3pt1ck."
            )
            buttons = [
                ("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", "pay_crypto"),
                ("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã", "menu_pay")
            ]
            logger.error(f"Error in pay_crypto: {error}")
            await query.edit_message_text(error_msg, parse_mode="Markdown", reply_markup=get_keyboard(buttons))
            return

        invoice_id = invoice["invoice_id"]
        pay_url = invoice["pay_url"]

        context.user_data["payment_type"] = "crypto"
        context.user_data["invoice_id"] = invoice_id
        context.user_data["username"] = username
        logger.info(f"CryptoBot invoice created: invoice_id={invoice_id}, pay_url={pay_url}")

        text = (
            "üí∏ *–û–ø–ª–∞—Ç–∏—Ç–µ —á–µ—Ä–µ–∑ CryptoBot*\n\n"
            "–¶–µ–Ω–∞: *4 TON*\n"
            f"[–û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ CryptoBot]({pay_url})\n\n"
            "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É'."
        )
        buttons = [
            ("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", "pay_crypto_confirm"),
            ("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã", "menu_pay")
        ]
        await query.edit_message_text(text, parse_mode="Markdown", reply_markup=get_keyboard(buttons), disable_web_page_preview=True)
    except Exception as e:
        logger.error(f"Critical error in pay_crypto: {e}", exc_info=True)
        error_msg = (
            "‚ùå *–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞!*\n\n"
            f"–ü—Ä–∏—á–∏–Ω–∞: {str(e)}.\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ CRYPTOBOT_API_TOKEN –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @s3pt1ck."
        )
        buttons = [
            ("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", "pay_crypto"),
            ("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã", "menu_pay")
        ]
        await query.edit_message_text(error_msg, parse_mode="Markdown", reply_markup=get_keyboard(buttons))

async def pay_crypto_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Check payment and issue HWID key."""
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    username = context.user_data.get("username")

    payment_type = context.user_data.get("payment_type")
    if payment_type != "crypto":
        text = (
            "‚ùå *–û—à–∏–±–∫–∞!*\n\n"
            "–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è CryptoBot. YooKassa –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
        )
        buttons = [("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã", "menu_pay")]
        await query.edit_message_text(text, parse_mode="Markdown", reply_markup=get_keyboard(buttons))
        return

    invoice_id = context.user_data.get("invoice_id")
    if not invoice_id or not username:
        logger.error(f"Payment data missing: invoice_id={invoice_id}, username={username}")
        text = (
            "‚ùå *–û—à–∏–±–∫–∞!*\n\n"
            "–î–∞–Ω–Ω—ã–µ –æ–± –æ–ø–ª–∞—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @s3pt1ck."
        )
        buttons = [
            ("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", "pay_crypto"),
            ("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã", "menu_pay")
        ]
        await query.edit_message_text(text, parse_mode="Markdown", reply_markup=get_keyboard(buttons))
        return

    try:
        text = "‚è≥ *–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã...*\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ."
        buttons = [("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã", "menu_pay")]
        await query.edit_message_text(text, parse_mode="Markdown", reply_markup=get_keyboard(buttons))

        status, error = check_invoice_status(invoice_id)
        if error:
            logger.error(f"Error checking invoice: {error}")
            text = (
                f"‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–ø–ª–∞—Ç—ã!*\n\n"
                f"–ü—Ä–∏—á–∏–Ω–∞: {error}\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ CRYPTOBOT_API_TOKEN –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @s3pt1ck."
            )
            buttons = [
                ("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", "pay_crypto_confirm"),
                ("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã", "menu_pay")
            ]
            await query.edit_message_text(text, parse_mode="Markdown", reply_markup=get_keyboard(buttons))
            return

        if status == "paid":
            hwid = generate_license()
            append_license_to_sheet(hwid, username)
            text = (
                "üéâ *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–∫—É–ø–∫–æ–π!*\n\n"
                "–í–∞—à HWID –∫–ª—é—á:\n"
                f"`{hwid}`\n\n"
                "–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –µ–≥–æ –≤ –Ω–∞–¥–µ–∂–Ω–æ–º –º–µ—Å—Ç–µ! üöÄ"
            )
            buttons = [("üè† –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "menu_main")]
            logger.info(f"CryptoBot payment confirmed, key issued: {hwid} for {username}")
            await query.edit_message_text(text, parse_mode="Markdown", reply_markup=get_keyboard(buttons))
            context.user_data.clear()
        else:
            logger.warning(f"CryptoBot payment not confirmed: invoice_id={invoice_id}, status={status}")
            text = (
                "‚è≥ *–û–ø–ª–∞—Ç–∞ –µ—â–µ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!*\n\n"
                f"–°—Ç–∞—Ç—É—Å: {status}.\n"
                "–ó–∞–≤–µ—Ä—à–∏—Ç–µ –æ–ø–ª–∞—Ç—É –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. –°–≤—è–∂–∏—Ç–µ—Å—å —Å @s3pt1ck."
            )
            buttons = [
                ("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", "pay_crypto_confirm"),
                ("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã", "menu_pay")
            ]
            await query.edit_message_text(text, parse_mode="Markdown", reply_markup=get_keyboard(buttons))
    except Exception as e:
        logger.error(f"Critical error in pay_crypto_confirm: {e}", exc_info=True)
        text = (
            f"‚ùå *–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞!*\n\n"
            f"–ü—Ä–∏—á–∏–Ω–∞: {str(e)}.\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ CRYPTOBOT_API_TOKEN –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @s3pt1ck."
        )
        buttons = [
            ("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", "pay_crypto_confirm"),
            ("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã", "menu_pay")
        ]
        await query.edit_message_text(text, parse_mode="Markdown", reply_markup=get_keyboard(buttons))

async def pay_yookassa(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Confirm YooKassa payment."""
    query = update.callback_query
    await query.answer()
    text = (
        "üí≥ *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã YooKassa*\n\n"
        "–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –æ–ø–ª–∞—Ç–∏—Ç—å *1000 RUB* –∑–∞ –ª–∏—Ü–µ–Ω–∑–∏—é Valture.\n"
        "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–ø–ª–∞—Ç—É?"
    )
    buttons = [
        ("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", "pay_yookassa_confirm"),
        ("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã", "menu_pay")
    ]
    await query.edit_message_text(text, parse_mode="Markdown", reply_markup=get_keyboard(buttons))

async def pay_yookassa_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Process YooKassa payment."""
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    username = query.from_user.username or query.from_user.full_name

    try:
        logger.debug(f"Creating YooKassa payment for user: {username} (ID: {user_id})")
        payment, error = create_yookassa_payment(
            amount=1000.0,
            description="Valture License",
            user_id=user_id,
            username=username
        )
        if not payment:
            error_msg = (
                "‚ùå *–û—à–∏–±–∫–∞!*\n\n"
                f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂: {error or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}.\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ YOOKASSA_SHOP_ID –∏ YOOKASSA_SECRET_KEY –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @s3pt1ck."
            )
            buttons = [
                ("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", "pay_yookassa"),
                ("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã", "menu_pay")
            ]
            logger.error(f"Error in pay_yookassa: {error}")
            await query.edit_message_text(error_msg, parse_mode="Markdown", reply_markup=get_keyboard(buttons))
            return

        payment_id = payment.id
        confirmation_url = payment.confirmation.confirmation_url

        context.user_data["payment_type"] = "yookassa"
        context.user_data["payment_id"] = payment_id
        context.user_data["username"] = username
        logger.info(f"YooKassa payment created: payment_id={payment_id}, confirmation_url={confirmation_url}")

        text = (
            "üí≥ *–û–ø–ª–∞—Ç–∏—Ç–µ —á–µ—Ä–µ–∑ YooKassa*\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã *1000 RUB*:\n"
            f"[–û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ YooKassa]({confirmation_url})\n\n"
            "–ö–ª—é—á –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
        )
        buttons = [("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã", "menu_pay")]
        await query.edit_message_text(text, parse_mode="Markdown", reply_markup=get_keyboard(buttons), disable_web_page_preview=True)
    except Exception as e:
        logger.error(f"Critical error in pay_yookassa_confirm: {e}", exc_info=True)
        error_msg = (
            "‚ùå *–û—à–∏–±–∫–∞!*\n\n"
            f"–û—à–∏–±–∫–∞: {str(e)}.\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ YOOKASSA_SHOP_ID –∏ YOOKASSA_SECRET_KEY –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @s3pt1ck."
        )
        buttons = [
            ("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", "pay_yookassa"),
            ("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã", "menu_pay")
        ]
        await query.edit_message_text(error_msg, parse_mode="Markdown", reply_markup=get_keyboard(buttons))

async def pay_verify(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Verify payment."""
    query = update.callback_query
    await query.answer()

    payment_type = context.user_data.get("payment_type")
    if payment_type != "crypto":
        text = (
            "‚ùå *–û—à–∏–±–∫–∞!*\n\n"
            "–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è CryptoBot. YooKassa –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
        )
        buttons = [("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã", "menu_pay")]
        await query.edit_message_text(text, parse_mode="Markdown", reply_markup=get_keyboard(buttons))
        return

    invoice_id = context.user_data.get("invoice_id")
    username = context.user_data.get("username")

    if not invoice_id or not username:
        logger.error(f"Payment data missing: invoice_id={invoice_id}, username={username}")
        text = (
            "‚ùå *–û—à–∏–±–∫–∞!*\n\n"
            "–î–∞–Ω–Ω—ã–µ –æ–± –æ–ø–ª–∞—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @s3pt1ck."
        )
        buttons = [
            ("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", "pay_crypto"),
            ("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã", "menu_pay")
        ]
        await query.edit_message_text(text, parse_mode="Markdown", reply_markup=get_keyboard(buttons))
        return

    try:
        text = "‚è≥ *–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã...*\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ."
        buttons = [("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã", "menu_pay")]
        await query.edit_message_text(text, parse_mode="Markdown", reply_markup=get_keyboard(buttons))

        status, error = check_invoice_status(invoice_id)
        if error:
            logger.error(f"Error checking invoice: {error}")
            text = (
                f"‚ùå *–û—à–∏–±–∫–∞!*\n\n"
                f"–û—à–∏–±–∫–∞: {error}.\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ CRYPTOBOT_API_TOKEN –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @s3pt1ck."
            )
            buttons = [
                ("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", "pay_verify"),
                ("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã", "menu_pay")
            ]
            await query.edit_message_text(text, parse_mode="Markdown", reply_markup=get_keyboard(buttons))
            return

        if status == "paid":
            license_key = generate_license()
            append_license_to_sheet(license_key, username)
            text = (
                "üéâ *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–∫—É–ø–∫–æ–π!*\n\n"
                "–í–∞—à HWID –∫–ª—é—á:\n"
                f"`{license_key}`\n\n"
                "–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –µ–≥–æ –≤ –Ω–∞–¥–µ–∂–Ω–æ–º –º–µ—Å—Ç–µ! üöÄ"
            )
            buttons = [("üè† –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "menu_main")]
            logger.info(f"CryptoBot payment confirmed, key issued: {license_key} for {username}")
            await query.edit_message_text(text, parse_mode="Markdown", reply_markup=get_keyboard(buttons))
            context.user_data.clear()
        else:
            logger.warning(f"CryptoBot payment not confirmed: invoice_id={invoice_id}, status={status}")
            text = (
                "‚è≥ *–û–ø–ª–∞—Ç–∞ –µ—â–µ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞*\n\n"
                f"–°—Ç–∞—Ç—É—Å: {status}. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –æ–ø–ª–∞—Ç—É –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
            buttons = [
                ("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", "pay_verify"),
                ("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã", "menu_pay")
            ]
            await query.edit_message_text(text, parse_mode="Markdown", reply_markup=get_keyboard(buttons))
    except Exception as e:
        logger.error(f"Error verifying CryptoBot payment: {e}", exc_info=True)
        text = (
            f"‚ùå *–û—à–∏–±–∫–∞!*\n\n"
            f"–û—à–∏–±–∫–∞: {str(e)}.\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ CRYPTOBOT_API_TOKEN –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @s3pt1ck."
        )
        buttons = [
            ("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", "pay_verify"),
            ("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã", "menu_pay")
        ]
        await query.edit_message_text(text, parse_mode="Markdown", reply_markup=get_keyboard(buttons))

async def support(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Support menu."""
    query = update.callback_query
    await query.answer()
    text = (
        "üìû *–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?*\n\n"
        "–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π:\n"
        "üëâ *@s3pt1ck*\n\n"
        "–ú—ã –æ—Ç–≤–µ—Ç–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±—ã—Å—Ç—Ä–æ! üòä"
    )
    buttons = [("üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "menu_main")]
    await query.edit_message_text(text, parse_mode="Markdown", reply_markup=get_keyboard(buttons))

async def faq(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """FAQ section."""
    query = update.callback_query
    await query.answer()
    text = (
        "‚ùì *–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã*\n\n"
        "üîπ *–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é?*\n"
        "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ '–ö—É–ø–∏—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é' –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã.\n\n"
        "üîπ *–ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ –∫–ª—é—á –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç?*\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @s3pt1ck.\n\n"
        "üîπ *–ú–æ–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–ª—é—á –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö?*\n"
        "–ù–µ—Ç, –∫–ª—é—á –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –æ–¥–Ω–æ–º—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É."
    )
    buttons = [("üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "menu_main")]
    await query.edit_message_text(text, parse_mode="Markdown", reply_markup=get_keyboard(buttons))

async def news(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """News section."""
    query = update.callback_query
    await query.answer()
    text = (
        "üì∞ *–ù–æ–≤–æ—Å—Ç–∏ Valture*\n\n"
        "–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!\n"
        "–ü–æ–∫–∞ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–µ—Ç. üìÖ"
    )
    buttons = [("üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "menu_main")]
    await query.edit_message_text(text, parse_mode="Markdown", reply_markup=get_keyboard(buttons))

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle button presses."""
    query = update.callback_query
    data = query.data

    if data == "menu_main":
        await main_menu(update, context)
    elif data == "menu_pay":
        await pay(update, context)
    elif data == "pay_crypto":
        await pay_crypto(update, context)
    elif data == "pay_crypto_confirm":
        await pay_crypto_confirm(update, context)
    elif data == "pay_yookassa":
        await pay_yookassa(update, context)
    elif data == "pay_yookassa_confirm":
        await pay_yookassa_confirm(update, context)
    elif data == "pay_verify":
        await pay_verify(update, context)
    elif data == "menu_support":
        await support(update, context)
    elif data == "menu_faq":
        await faq(update, context)
    elif data == "menu_about":
        await about(update, context)
    elif data == "menu_news":
        await news(update, context)

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    Thread(target=run_flask).start()

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application = Application.builder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))

    logger.info("Valture –±–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    application.run_polling()
