from telebot import types
import requests
import os
import random
import string
from datetime import datetime, timezone, timedelta
import gspread
from google.oauth2.service_account import Credentials
import logging
import time
from flask import Flask, request, jsonify
from threading import Thread, Timer
from uuid import uuid4
from yookassa import Configuration, Payment
import sqlite3
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
# –¶–µ–Ω—ã, —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –Ω–æ–≤–æ—Å—Ç–∏
CRYPTO_AMOUNT = 0.01  # TON –¥–ª—è CryptoBot
YOOKASSA_AMOUNT = 1.0  # RUB –¥–ª—è YooKassa
APP_DOWNLOAD_URL = "https://www.dropbox.com/scl/fi/ze5ebd909z2qeaaucn56q/VALTURE.exe?rlkey=ihdzk8voej4oikrdhq0wfzvbb&st=7lufvad0&dl=1"
NEWS_TEXT = (
    "üì∞ *–ù–æ–≤–æ—Å—Ç–∏ Valture*\n\n"
    "üì¢ *–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ 1.2.3 (01.06.2025)*\n"
    "- –£–ª—É—á—à–µ–Ω–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è FPS –¥–ª—è –Ω–æ–≤—ã—Ö –≤–∏–¥–µ–æ–∫–∞—Ä—Ç.\n"
    "- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –±–∞–≥–∏ —Å –º—ã—à—å—é –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∏–≥—Ä–∞—Ö.\n"
    "- –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ Windows 11 24H2.\n\n"
    "–°–∫–∞—á–∏–≤–∞–π—Ç–µ –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ —Å—Å—ã–ª–∫–µ, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏—Ö–æ–¥–∏—Ç —Å –∫–ª—é—á–æ–º!\n"
    "–°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –∏ –ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @s3pt1ck, –µ—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã."
)

TOKEN = os.environ.get("BOT_TOKEN", 'YOUR_BOT_TOKEN')
CRYPTOBOT_API_TOKEN = os.environ.get("CRYPTOBOT_API_TOKEN", 'YOUR_CRYPTOBOT_TOKEN')
YOOKASSA_SHOP_ID = os.environ.get("YOOKASSA_SHOP_ID")
YOOKASSA_SECRET_KEY = os.environ.get("YOOKASSA_SECRET_KEY")
CREDS_FILE = os.environ.get("CREDS_FILE", "valture-license-bot-account.json")
SPREADSHEET_NAME = os.environ.get("SPREADSHEET_NAME", "Valture_Licenses")
TEST_PAYMENT_AMOUNT = 0.1  # TON –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π CryptoBot

SCOPE = [
    "https://www.googleapis.com/auth/spreadsheets",
    "https://www.googleapis.com/auth/drive",
]

CRYPTO_BOT_API = "https://pay.crypt.bot/api"

# Configure YooKassa
if YOOKASSA_SHOP_ID and YOOKASSA_SECRET_KEY:
    Configuration.account_id = YOOKASSA_SHOP_ID
    Configuration.secret_key = YOOKASSA_SECRET_KEY

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.DEBUG
)
logger = logging.getLogger(__name__)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SQLite ---
def init_db():
    conn = sqlite3.connect('transactions.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS transactions (
            payment_id TEXT PRIMARY KEY,
            user_id TEXT,
            username TEXT,
            license_key TEXT,
            timestamp TEXT,
            payment_type TEXT,
            status TEXT
        )
    ''')
    conn.commit()
    conn.close()

init_db()

# --- Flask –¥–ª—è keep-alive –∏ –≤–µ–±—Ö—É–∫–æ–≤ ---
app = Flask(__name__)

@app.route('/')
def home():
    return "‚úÖ Valture –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

@app.route('/yookassa-webhook', methods=['POST'])
def yookassa_webhook():
    try:
        event_json = request.get_json()
        logger.debug(f"YooKassa webhook received: {event_json}")
        
        if not event_json or 'event' not in event_json or 'object' not in event_json:
            logger.error("Invalid webhook payload")
            return jsonify({"status": "error", "message": "Invalid payload"}), 400

        event = event_json['event']
        payment_object = event_json['object']
        payment_id = payment_object['id']
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –±—ã–ª –ª–∏ –ø–ª–∞—Ç–µ–∂ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
        conn = sqlite3.connect('transactions.db')
        cursor = conn.cursor()
        cursor.execute("SELECT status FROM transactions WHERE payment_id = ?", (payment_id,))
        result = cursor.fetchone()
        if result:
            logger.warning(f"Payment {payment_id} already processed with status: {result[0]}")
            conn.close()
            return jsonify({"status": "ignored", "message": "Payment already processed"}), 200

        if event == 'payment.succeeded':
            metadata = payment_object.get('metadata', {})
            user_id = metadata.get('user_id')
            username = metadata.get('username')
            
            if not user_id or not username:
                logger.error(f"Missing metadata: user_id={user_id}, username={username}")
                conn.close()
                return jsonify({"status": "error", "message": "Missing metadata"}), 400

            try:
                license_key = generate_license()
                sheet_success = append_license_to_sheet(license_key, username)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ –±–∞–∑–µ
                cursor.execute('''
                    INSERT INTO transactions (payment_id, user_id, username, license_key, timestamp, payment_type, status)
                    VALUES (?, ?, ?, ?, ?, ?, ?)
                ''', (payment_id, user_id, username, license_key, datetime.now().strftime("%Y-%m-%d %H:%M:%S"), 'yookassa', 'succeeded'))
                conn.commit()
                
                bot.send_message(
                    chat_id=user_id,
                    text=(
                        "üéâ *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–∫—É–ø–∫–æ–π!*\n\n"
                        f"–í–∞—à –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–π –∫–ª—é—á:\n`{license_key}`\n\n"
                        f"–°–∫–∞—á–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Valture:\n[VALTURE.exe]({APP_DOWNLOAD_URL})\n\n"
                        "–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∫–ª—é—á –∏ —Å–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ! üöÄ"
                    ),
                    parse_mode="Markdown",
                    disable_web_page_preview=True
                )
                logger.info(f"YooKassa payment processed: {license_key} for {username}")
                if user_id in invoices and invoices[user_id]['payment_type'] == 'yookassa':
                    del invoices[user_id]
            except Exception as e:
                logger.error(f"Error processing YooKassa payment {payment_id}: {e}")
                cursor.execute('''
                    INSERT INTO transactions (payment_id, user_id, username, timestamp, payment_type, status)
                    VALUES (?, ?, ?, ?, ?, ?)
                ''', (payment_id, user_id, username, datetime.now().strftime("%Y-%m-%d %H:%M:%S"), 'yookassa', 'failed'))
                conn.commit()
                bot.send_message(
                    chat_id=user_id,
                    text=(
                        "‚ùå *–û—à–∏–±–∫–∞!*\n\n"
                        "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–∞—Ç—å –∫–ª—é—á. –°–≤—è–∂–∏—Ç–µ—Å—å —Å @s3pt1ck."
                    ),
                    parse_mode="Markdown"
                )
            conn.close()
            return jsonify({"status": "ok"}), 200
        
        elif event == 'payment.canceled':
            logger.warning(f"YooKassa payment canceled: {payment_id}")
            cursor.execute('''
                INSERT INTO transactions (payment_id, user_id, username, timestamp, payment_type, status)
                VALUES (?, ?, ?, ?, ?, ?)
            ''', (payment_id, user_id or '', username or '', datetime.now().strftime("%Y-%m-%d %H:%M:%S"), 'yookassa', 'canceled'))
            conn.commit()
            conn.close()
            return jsonify({"status": "ok"}), 200
        
        conn.close()
        return jsonify({"status": "ignored"}), 200
    
    except Exception as e:
        logger.error(f"Error in YooKassa webhook: {e}")
        return jsonify({"status": "error", "message": str(e)}), 500

def run_flask():
    port = int(os.environ.get("PORT", 8080))
    app.run(host="0.0.0.0", port=port)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ---
bot = telebot.TeleBot(TOKEN)
invoices = {}
sheet_cache = None

# --- –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö invoices ---
def clean_old_invoices():
    current_time = time.time()
    expired = []
    for user_id, invoice in invoices.items():
        if current_time - invoice.get('created_at', current_time) > 1800:  # 30 –º–∏–Ω—É—Ç
            expired.append(user_id)
    for user_id in expired:
        del invoices[user_id]
    logger.debug(f"–û—á–∏—â–µ–Ω–æ {len(expired)} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∏–Ω–≤–æ–π—Å–æ–≤")
    # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –æ—á–∏—Å—Ç–∫—É —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç
    Timer(600, clean_old_invoices).start()

# –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é –æ—á–∏—Å—Ç–∫—É
Timer(600, clean_old_invoices).start()

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ Google Sheets ---
def setup_google_creds():
    logger.debug("–ü—Ä–æ–≤–µ—Ä–∫–∞ Google credentials...")
    if not os.path.exists(CREDS_FILE):
        logger.error(f"–§–∞–π–ª —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö {CREDS_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        raise FileNotFoundError(f"–§–∞–π–ª {CREDS_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–∞–π–ª —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {CREDS_FILE}")

def get_sheet():
    global sheet_cache
    if sheet_cache is None:
        try:
            setup_google_creds()
            creds = Credentials.from_service_account_file(CREDS_FILE, scopes=SCOPE)
            client = gspread.authorize(creds)
            sheet_cache = client.open(SPREADSHEET_NAME).sheet1
            logger.info(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Google Sheet: {SPREADSHEET_NAME}")
        except gspread.exceptions.SpreadsheetNotFound:
            logger.error(f"Google Sheet '{SPREADSHEET_NAME}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            raise
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets: {str(e)}")
            raise
    return sheet_cache

def generate_license(length=32):
    try:
        key = ''.join(random.choices(string.ascii_uppercase + string.digits, k=length))
        logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω HWID-–∫–ª—é—á: {key}")
        return key
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–∞: {str(e)}")
        raise

def append_license_to_sheet(license_key, username, retries=3, delay=2):
    for attempt in range(1, retries + 1):
        try:
            sheet = get_sheet()
            utc_plus_2 = timezone(timedelta(hours=2))
            now_utc_plus_2 = datetime.now(utc_plus_2)
            now_str = now_utc_plus_2.strftime("%Y-%m-%d %H:%M:%S")
            sheet.append_row([license_key, "", username, now_str])
            logger.info(f"HWID-–∫–ª—é—á {license_key} –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è {username}")
            return True
        except Exception as e:
            logger.error(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt}/{retries} –Ω–µ —É–¥–∞–ª–∞—Å—å: {str(e)}")
            if attempt < retries:
                time.sleep(delay)
    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á {license_key} –ø–æ—Å–ª–µ {retries} –ø–æ–ø—ã—Ç–æ–∫")
    return False

# --- –ü–ª–∞—Ç–µ–∂–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def create_crypto_invoice(amount, asset="TON", description="Valture License"):
    logger.debug(f"–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞: amount={amount}, asset={asset}")
    if not CRYPTOBOT_API_TOKEN:
        logger.error("CRYPTOBOT_API_TOKEN –Ω–µ –∑–∞–¥–∞–Ω")
        return None, "CRYPTOBOT_API_TOKEN –Ω–µ –∑–∞–¥–∞–Ω"
    try:
        payload = {
            "amount": str(amount),
            "asset": asset,
            "description": description,
            "order_id": str(uuid4())
        }
        headers = {
            "Crypto-Pay-API-Token": CRYPTOBOT_API_TOKEN,
            "Content-Type": "application/json"
        }
        response = requests.post(f"{CRYPTO_BOT_API}/createInvoice", json=payload, headers=headers, timeout=10)
        logger.debug(f"HTTP —Å—Ç–∞—Ç—É—Å: {response.status_code}, –û—Ç–≤–µ—Ç: {response.text}")
        response.raise_for_status()
        data = response.json()
        if data.get("ok"):
            logger.info(f"–ò–Ω–≤–æ–π—Å —Å–æ–∑–¥–∞–Ω: invoice_id={data['result']['invoice_id']}")
            return data["result"], None
        else:
            error_msg = data.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
            logger.error(f"–û—à–∏–±–∫–∞ API CryptoBot: {error_msg}")
            return None, f"–û—à–∏–±–∫–∞ API: {error_msg}"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞: {e}")
        return None, f"–û—à–∏–±–∫–∞: {str(e)}"

def check_invoice_status(invoice_id):
    logger.debug(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–≤–æ–π—Å–∞: invoice_id={invoice_id}")
    try:
        headers = {"Crypto-Pay-API-Token": CRYPTOBOT_API_TOKEN}
        response = requests.get(f"{CRYPTO_BOT_API}/getInvoices?invoice_ids={invoice_id}", headers=headers, timeout=10)
        logger.debug(f"HTTP —Å—Ç–∞—Ç—É—Å: {response.status_code}, –û—Ç–≤–µ—Ç: {response.text}")
        response.raise_for_status()
        data = response.json()
        if data.get("ok"):
            status = data["result"]["items"][0]["status"]
            logger.info(f"–°—Ç–∞—Ç—É—Å –∏–Ω–≤–æ–π—Å–∞ {invoice_id}: {status}")
            return status
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {data.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω–≤–æ–π—Å–∞: {e}")
        return None

def create_yookassa_payment(amount, description, user_id, username):
    logger.debug(f"–°–æ–∑–¥–∞–Ω–∏–µ YooKassa –ø–ª–∞—Ç–µ–∂–∞: amount={amount}, user_id={user_id}")
    if not YOOKASSA_SHOP_ID or not YOOKASSA_SECRET_KEY:
        logger.error("YOOKASSA_SHOP_ID –∏–ª–∏ YOOKASSA_SECRET_KEY –Ω–µ –∑–∞–¥–∞–Ω—ã")
        return None, "YooKassa credentials not configured"
    try:
        idempotence_key = str(uuid4())
        payment = Payment.create({
            "amount": {
                "value": f"{amount:.2f}",
                "currency": "RUB"
            },
            "confirmation": {
                "type": "redirect",
                "return_url": "https://t.me/valture_buy_bot"
            },
            "capture": True,
            "description": description,
            "metadata": {
                "user_id": str(user_id),
                "username": username
            }
        }, idempotence_key)
        logger.info(f"YooKassa –ø–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω: payment_id={payment.id}")
        return payment, None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è YooKassa –ø–ª–∞—Ç–µ–∂–∞: {e}")
        return None, f"YooKassa –æ—à–∏–±–∫–∞: {str(e)}"

def check_yookassa_payment_status(payment_id):
    logger.debug(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ YooKassa –ø–ª–∞—Ç–µ–∂–∞: payment_id={payment_id}")
    try:
        payment = Payment.find_one(payment_id)
        status = payment.status
        logger.info(f"–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ {payment_id}: {status}")
        return status
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ YooKassa –ø–ª–∞—Ç–µ–∂–∞: {e}")
        return None

# --- –õ–æ–≥–∏–∫–∞ –±–æ—Ç–∞ ---
@bot.message_handler(commands=['start'])
def welcome(message):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='menu_main'))
    bot.send_message(
        message.chat.id,
        (
            "üéÆ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Valture!*\n\n"
            "–í–∞—à –ª—É—á—à–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∏–≥—Ä–æ–≤–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏! üöÄ\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:"
        ),
        parse_mode="Markdown",
        reply_markup=markup
    )

@bot.message_handler(commands=['test_sheets'])
def test_sheets(message):
    try:
        sheet = get_sheet()
        test_key = "TEST_KEY_" + str(int(time.time()))
        sheet.append_row([test_key, "", "test_user", datetime.now().strftime("%Y-%m-%d %H:%M:%S")])
        logger.info(f"–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å {test_key} –¥–æ–±–∞–≤–ª–µ–Ω–∞")
        bot.reply_to(message, f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –∫–ª—é—á: {test_key}!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Google Sheets: {str(e)}")
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {str(e)}")

@bot.callback_query_handler(func=lambda call: True)
def button_handler(call):
    data = call.data
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    markup = types.InlineKeyboardMarkup()
    username = call.from_user.username or call.from_user.first_name

    if data == "menu_main":
        markup.add(types.InlineKeyboardButton(text="‚ÑπÔ∏è –û Valture", callback_data='menu_about'))
        markup.add(types.InlineKeyboardButton(text="üì∞ –ù–æ–≤–æ—Å—Ç–∏", callback_data='menu_news'))
        markup.add(types.InlineKeyboardButton(text="üí∞ –ö—É–ø–ª–µ–Ω–Ω—ã–µ –ª–∏—Ü–µ–Ω–∑–∏–∏", callback_data='menu_licenses'))
        markup.add(types.InlineKeyboardButton(text="üí≥ –ö—É–ø–∏—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é", callback_data='menu_pay'))
        markup.add(types.InlineKeyboardButton(text="‚ùì FAQ", callback_data='menu_faq'))
        markup.add(types.InlineKeyboardButton(text="üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data='menu_support'))
        bot.edit_message_text(
            "üè† *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
            chat_id=chat_id,
            message_id=message_id,
            parse_mode="Markdown",
            reply_markup=markup
        )

    elif data == "menu_about":
        markup.add(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='menu_main'))
        bot.edit_message_text(
            (
                "‚ú® *Valture ‚Äî –í–∞—à –ø—É—Ç—å –∫ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤—É –≤ –∏–≥—Ä–∞—Ö*\n\n"
                "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                "Valture ‚Äî —ç—Ç–æ –ø–µ—Ä–µ–¥–æ–≤–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è –≥–µ–π–º–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –≥–æ—Ç–æ–≤—ã –º–∏—Ä–∏—Ç—å—Å—è —Å –∫–æ–º–ø—Ä–æ–º–∏—Å—Å–∞–º–∏.\n\n"
                "üî• *–ü–æ—á–µ–º—É –≤—ã–±–∏—Ä–∞—é—Ç Valture?*\n"
                "üöÄ –£–≤–µ–ª–∏—á–µ–Ω–∏–µ FPS –Ω–∞ 20‚Äì30%.\n"
                "üõ°Ô∏è –°—Ç–∞–±–∏–ª—å–Ω—ã–π —Ñ—Ä–µ–π–º—Ä–µ–π—Ç.\n"
                "üí° –ú–æ–ª–Ω–∏–µ–Ω–æ—Å–Ω–∞—è –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç—å.\n"
                "üîã –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è Windows.\n"
                "üõ≥Ô∏è –ü–ª–∞–≤–Ω–æ—Å—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.\n"
                "üñ•Ô∏è –ü–ª–∞–≤–Ω–æ—Å—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∏.\n\n"
                "‚ûñÔ∏è _–°–æ–∑–¥–∞–Ω–æ –¥–ª—è –≥–µ–π–º–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ü–µ–Ω—è—Ç –∫–∞—á–µ—Å—Ç–≤–æ._"
            ),
            chat_id=chat_id,
            message_id=message_id,
            parse_mode="Markdown",
            reply_markup=markup
        )

    elif data == "menu_news":
        markup.add(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='menu_main'))
        bot.edit_message_text(
            NEWS_TEXT,
            chat_id=chat_id,
            message_id=message_id,
            parse_mode="Markdown",
            reply_markup=markup
        )

    elif data == "menu_licenses":
        try:
            conn = sqlite3.connect('transactions.db')
            cursor = conn.cursor()
            cursor.execute(
                "SELECT license_key, timestamp, payment_type FROM transactions WHERE user_id = ? AND status = 'succeeded'",
                (chat_id,)
            )
            results = cursor.fetchall()
            conn.close()

            markup.add(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='menu_main'))
            if results:
                response = "üîë *–í–∞—à–∏ –∫—É–ø–ª–µ–Ω–Ω—ã–µ –ª–∏—Ü–µ–Ω–∑–∏–∏:*\n\n"
                for key, timestamp, payment_type in results:
                    response += (
                        f"–ö–ª—é—á: `{key}`\n"
                        f"–î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏: {timestamp}\n"
                        f"–¢–∏–ø –æ–ø–ª–∞—Ç—ã: {payment_type.capitalize()}\n\n"
                    )
            else:
                response = "–£ –≤–∞—Å –Ω–µ—Ç –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –ª–∏—Ü–µ–Ω–∑–∏–π."
                
            bot.edit_message_text(
                response,
                chat_id=chat_id,
                message_id=message_id,
                parse_mode="Markdown",
                reply_markup=markup
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–∏—Ü–µ–Ω–∑–∏–π: {e}")
            markup.add(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='menu_main'))
            bot.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ª–∏—Ü–µ–Ω–∑–∏–π. –°–≤—è–∂–∏—Ç–µ—Å—å —Å @s3pt1ck.",
                chat_id=chat_id,
                message_id=message_id,
                parse_mode="Markdown",
                reply_markup=markup
            )

    elif data == "menu_pay":
        markup.add(types.InlineKeyboardButton(text="üí∏ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ CryptoBot", callback_data='pay_crypto'))
        markup.add(types.InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ YooKassa", callback_data='pay_yookassa'))
        markup.add(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='menu_main'))
        bot.edit_message_text(
            (
                f"üí≥ *–ü–æ–∫—É–ø–∫–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏ Valture*\n\n"
                f"–¶–µ–Ω–∞: *{CRYPTO_AMOUNT} TON* –∏–ª–∏ *{YOOKASSA_AMOUNT} RUB (~$12.7)*\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:\n"
                "- *CryptoBot*: –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É.\n"
                "- *YooKassa*: –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π.\n\n"
                "–ö–ª—é—á –∏ —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã."
            ),
            chat_id=chat_id,
            message_id=message_id,
            parse_mode="Markdown",
            reply_markup=markup
        )

    elif data == "pay_crypto":
        markup.add(types.InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data='pay_crypto_confirm'))
        markup.add(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã", callback_data='menu_pay'))
        bot.edit_message_text(
            (
                f"üí∏ *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã CryptoBot*\n\n"
                f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –æ–ø–ª–∞—Ç–∏—Ç—å *{CRYPTO_AMOUNT} TON* –∑–∞ –ª–∏—Ü–µ–Ω–∑–∏—é Valture.\n"
                "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–ø–ª–∞—Ç—É?"
            ),
            chat_id=chat_id,
            message_id=message_id,
            parse_mode="Markdown",
            reply_markup=markup
        )

    elif data == "pay_crypto_confirm":
        try:
            invoice, error = create_crypto_invoice(amount=CRYPTO_AMOUNT)
            if not invoice:
                markup.add(types.InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data='pay_crypto'))
                markup.add(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã", callback_data='menu_pay'))
                bot.edit_message_text(
                    (
                        "‚ùå *–û—à–∏–±–∫–∞!*\n\n"
                        f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–Ω–≤–æ–π—Å: {error or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}.\n"
                        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @s3pt1ck."
                    ),
                    chat_id=chat_id,
                    message_id=message_id,
                    parse_mode="Markdown",
                    reply_markup=markup
                )
                return

            invoice_id = invoice["invoice_id"]
            pay_url = invoice["pay_url"]
            invoices[chat_id] = {
                'invoice_id': invoice_id,
                'username': username,
                'payment_type': 'crypto',
                'created_at': time.time()
            }
            logger.info(f"–ò–Ω–≤–æ–π—Å —Å–æ–∑–¥–∞–Ω: invoice_id={invoice_id}, pay_url={pay_url}")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–≤–æ–π—Å –≤ –±–∞–∑–µ
            conn = sqlite3.connect('transactions.db')
            cursor = conn.cursor()
            cursor.execute('''
                INSERT INTO transactions (payment_id, user_id, username, timestamp, payment_type, status)
                VALUES (?, ?, ?, ?, ?, ?)
            ''', (invoice_id, chat_id, username, datetime.now().strftime("%Y-%m-%d %H:%M:%S"), 'crypto', 'pending'))
            conn.commit()
            conn.close()

            markup.add(types.InlineKeyboardButton(text=f"–û–ø–ª–∞—Ç–∏—Ç—å {CRYPTO_AMOUNT} TON", url=pay_url))
            markup.add(types.InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data='pay_verify'))
            markup.add(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã", callback_data='menu_pay'))
            bot.edit_message_text(
                (
                    f"üí∏ *–û–ø–ª–∞—Ç–∏—Ç–µ —á–µ—Ä–µ–∑ CryptoBot*\n\n"
                    f"–ù–∞–∂–º–∏—Ç–µ –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã *{CRYPTO_AMOUNT} TON*:\n"
                    f"[–û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ CryptoBot]({pay_url})\n\n"
                    "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–∏–∂–µ."
                ),
                chat_id=chat_id,
                message_id=message_id,
                parse_mode="Markdown",
                reply_markup=markup,
                disable_web_page_preview=True
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞: {e}")
            markup.add(types.InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data='pay_crypto'))
            markup.add(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã", callback_data='menu_pay'))
            bot.edit_message_text(
                (
                    "‚ùå *–û—à–∏–±–∫–∞!*\n\n"
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å. –°–≤—è–∂–∏—Ç–µ—Å—å —Å @s3pt1ck."
                ),
                chat_id=chat_id,
                message_id=message_id,
                parse_mode="Markdown",
                reply_markup=markup
            )

    elif data == "pay_yookassa":
        markup.add(types.InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data='pay_yookassa_confirm'))
        markup.add(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã", callback_data='menu_pay'))
        bot.edit_message_text(
            (
                f"üí≥ *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã YooKassa*\n\n"
                f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –æ–ø–ª–∞—Ç–∏—Ç—å *{YOOKASSA_AMOUNT} RUB* –∑–∞ –ª–∏—Ü–µ–Ω–∑–∏—é Valture.\n"
                "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–ø–ª–∞—Ç—É?"
            ),
            chat_id=chat_id,
            message_id=message_id,
            parse_mode="Markdown",
            reply_markup=markup
        )

    elif data == "pay_yookassa_confirm":
        try:
            payment, error = create_yookassa_payment(
                amount=YOOKASSA_AMOUNT,
                description="Valture License",
                user_id=call.from_user.id,
                username=username
            )
            if not payment:
                markup.add(types.InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data='pay_yookassa'))
                markup.add(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã", callback_data='menu_pay'))
                bot.edit_message_text(
                    (
                        "‚ùå *–û—à–∏–±–∫–∞!*\n\n"
                        f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂: {error or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}.\n"
                        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @s3pt1ck."
                    ),
                    chat_id=chat_id,
                    message_id=message_id,
                    parse_mode="Markdown",
                    reply_markup=markup
                )
                return

            payment_id = payment.id
            confirmation_url = payment.confirmation.confirmation_url
            invoices[chat_id] = {
                'payment_id': payment_id,
                'username': username,
                'payment_type': 'yookassa',
                'created_at': time.time()
            }
            logger.info(f"YooKassa –ø–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω: payment_id={payment_id}")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –±–∞–∑–µ
            conn = sqlite3.connect('transactions.db')
            cursor = conn.cursor()
            cursor.execute('''
                INSERT INTO transactions (payment_id, user_id, username, timestamp, payment_type, status)
                VALUES (?, ?, ?, ?, ?, ?)
            ''', (payment_id, chat_id, username, datetime.now().strftime("%Y-%m-%d %H:%M:%S"), 'yookassa', 'pending'))
            conn.commit()
            conn.close()

            markup.add(types.InlineKeyboardButton(text=f"–û–ø–ª–∞—Ç–∏—Ç—å {YOOKASSA_AMOUNT} RUB", url=confirmation_url))
            markup.add(types.InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data='pay_verify'))
            markup.add(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã", callback_data='menu_pay'))
            bot.edit_message_text(
                (
                    f"üí≥ *–û–ø–ª–∞—Ç–∏—Ç–µ —á–µ—Ä–µ–∑ YooKassa*\n\n"
                    f"–ù–∞–∂–º–∏—Ç–µ –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã *{YOOKASSA_AMOUNT} RUB*:\n"
                    f"[–û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ YooKassa]({confirmation_url})\n\n"
                    "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–∏–∂–µ –∏–ª–∏ –¥–æ–∂–¥–∏—Ç–µ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏."
                ),
                chat_id=chat_id,
                message_id=message_id,
                parse_mode="Markdown",
                reply_markup=markup,
                disable_web_page_preview=True
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è YooKassa –ø–ª–∞—Ç–µ–∂–∞: {e}")
            markup.add(types.InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data='pay_yookassa'))
            markup.add(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã", callback_data='menu_pay'))
            bot.edit_message_text(
                (
                    "‚ùå *–û—à–∏–±–∫–∞!*\n\n"
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å. –°–≤—è–∂–∏—Ç–µ—Å—å —Å @s3pt1ck."
                ),
                chat_id=chat_id,
                message_id=message_id,
                parse_mode="Markdown",
                reply_markup=markup
            )

    elif data == "pay_verify":
        if chat_id not in invoices:
            markup.add(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã", callback_data='menu_pay'))
            bot.edit_message_text(
                (
                    "‚ùå *–û—à–∏–±–∫–∞!*\n\n"
                    "–î–∞–Ω–Ω—ã–µ –æ–± –æ–ø–ª–∞—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –ù–∞—á–Ω–∏—Ç–µ –æ–ø–ª–∞—Ç—É –∑–∞–Ω–æ–≤–æ."
                ),
                chat_id=chat_id,
                message_id=message_id,
                parse_mode="Markdown",
                reply_markup=markup
            )
            return

        payment_type = invoices[chat_id]['payment_type']
        username = invoices[chat_id]['username']

        try:
            markup.add(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã", callback_data='menu_pay'))
            bot.edit_message_text(
                "‚è≥ *–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã...*\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.",
                chat_id=chat_id,
                message_id=message_id,
                parse_mode="Markdown",
                reply_markup=markup
            )

            conn = sqlite3.connect('transactions.db')
            cursor = conn.cursor()

            if payment_type == 'crypto':
                invoice_id = invoices[chat_id]['invoice_id']
                status = check_invoice_status(invoice_id)
                if status == "paid":
                    cursor.execute("SELECT license_key FROM transactions WHERE payment_id = ?", (invoice_id,))
                    result = cursor.fetchone()
                    if result and result[0]:
                        logger.warning(f"Invoice {invoice_id} already processed")
                        markup = types.InlineKeyboardMarkup()
                        markup.add(types.InlineKeyboardButton(text="üè† –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='menu_main'))
                        bot.edit_message_text(
                            (
                                "üéâ *–ü–ª–∞—Ç–µ–∂ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!*\n\n"
                                f"HWID-–∫–ª—é—á:\n`{result[0]}`\n\n"
                                f"–°–∫–∞—á–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Valture:\n[VALTURE.exe]({APP_DOWNLOAD_URL})\n\n"
                                "–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∫–ª—é—á –∏ —Å–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ! üöÄ"
                            ),
                            chat_id=chat_id,
                            message_id=message_id,
                            parse_mode="Markdown",
                            reply_markup=markup,
                            disable_web_page_preview=True
                        )
                        conn.close()
                        return

                    hwid_key = generate_license()
                    sheet_success = append_license_to_sheet(hwid_key, username)
                    cursor.execute('''
                        UPDATE transactions SET license_key = ?, status = ? WHERE payment_id = ?
                    ''', (hwid_key, 'succeeded', invoice_id))
                    conn.commit()
                    markup = types.InlineKeyboardMarkup()
                    markup.add(types.InlineKeyboardButton(text="üè† –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='menu_main'))
                    if sheet_success:
                        bot.edit_message_text(
                            (
                                "üéâ *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–∫—É–ø–∫–æ–π!*\n\n"
                                f"HWID-–∫–ª—é—á:\n`{hwid_key}`\n\n"
                                f"–°–∫–∞—á–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Valture:\n[VALTURE.exe]({APP_DOWNLOAD_URL})\n\n"
                                "–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∫–ª—é—á –∏ —Å–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ! üöÄ"
                            ),
                            chat_id=chat_id,
                            message_id=message_id,
                            parse_mode="Markdown",
                            reply_markup=markup,
                            disable_web_page_preview=True
                        )
                    else:
                        bot.edit_message_text(
                            (
                                "üéâ *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–∫—É–ø–∫–æ–π!*\n\n"
                                f"HWID-–∫–ª—é—á:\n`{hwid_key}`\n\n"
                                f"–°–∫–∞—á–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Valture:\n[VALTURE.exe]({APP_DOWNLOAD_URL})\n\n"
                                "–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∫–ª—é—á –∏ —Å–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ! üöÄ\n\n"
                                "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –∫–ª—é—á –≤ —Ç–∞–±–ª–∏—Ü—É. –°–≤—è–∂–∏—Ç–µ—Å—å —Å @s3pt1ck."
                            ),
                            chat_id=chat_id,
                            message_id=message_id,
                            parse_mode="Markdown",
                            reply_markup=markup,
                            disable_web_page_preview=True
                        )
                    logger.info(f"CryptoBot –æ–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞: {hwid_key} –¥–ª—è {username}")
                    del invoices[chat_id]
                else:
                    markup.add(types.InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data='pay_verify'))
                    markup.add(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã", callback_data='menu_pay'))
                    bot.edit_message_text(
                        (
                            "‚è≥ *–û–ø–ª–∞—Ç–∞ –µ—â–µ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞*\n\n"
                            "–ó–∞–≤–µ—Ä—à–∏—Ç–µ –æ–ø–ª–∞—Ç—É –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. –°–≤—è–∂–∏—Ç–µ—Å—å —Å @s3pt1ck."
                        ),
                        chat_id=chat_id,
                        message_id=message_id,
                        parse_mode="Markdown",
                        reply_markup=markup
                    )

            elif payment_type == 'yookassa':
                payment_id = invoices[chat_id]['payment_id']
                status = check_yookassa_payment_status(payment_id)
                if status == "succeeded":
                    cursor.execute("SELECT license_key FROM transactions WHERE payment_id = ?", (payment_id,))
                    result = cursor.fetchone()
                    if result and result[0]:
                        logger.warning(f"Payment {payment_id} already processed")
                        markup = types.InlineKeyboardMarkup()
                        markup.add(types.InlineKeyboardButton(text="üè† –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='menu_main'))
                        bot.edit_message_text(
                            (
                                "üéâ *–ü–ª–∞—Ç–µ–∂ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!*\n\n"
                                f"HWID-–∫–ª—é—á:\n`{result[0]}`\n\n"
                                f"–°–∫–∞—á–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Valture:\n[VALTURE.exe]({APP_DOWNLOAD_URL})\n\n"
                                "–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∫–ª—é—á –∏ —Å–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ! üöÄ"
                            ),
                            chat_id=chat_id,
                            message_id=message_id,
                            parse_mode="Markdown",
                            reply_markup=markup,
                            disable_web_page_preview=True
                        )
                        conn.close()
                        return

                    hwid_key = generate_license()
                    sheet_success = append_license_to_sheet(hwid_key, username)
                    cursor.execute('''
                        UPDATE transactions SET license_key = ?, status = ? WHERE payment_id = ?
                    ''', (hwid_key, 'succeeded', payment_id))
                    conn.commit()
                    markup = types.InlineKeyboardMarkup()
                    markup.add(types.InlineKeyboardButton(text="üè† –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='menu_main'))
                    if sheet_success:
                        bot.edit_message_text(
                            (
                                "üéâ *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–∫—É–ø–∫–æ–π!*\n\n"
                                f"HWID-–∫–ª—é—á:\n`{hwid_key}`\n\n"
                                f"–°–∫–∞—á–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Valture:\n[VALTURE.exe]({APP_DOWNLOAD_URL})\n\n"
                                "–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∫–ª—é—á –∏ —Å–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ! üöÄ"
                            ),
                            chat_id=chat_id,
                            message_id=message_id,
                            parse_mode="Markdown",
                            reply_markup=markup,
                            disable_web_page_preview=True
                        )
                    else:
                        bot.edit_message_text(
                            (
                                "üéâ *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–∫—É–ø–∫–æ–π!*\n\n"
                                f"HWID-–∫–ª—é—á:\n`{hwid_key}`\n\n"
                                f"–°–∫–∞—á–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Valture:\n[VALTURE.exe]({APP_DOWNLOAD_URL})\n\n"
                                "–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∫–ª—é—á –∏ —Å–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ! üöÄ\n\n"
                                "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –∫–ª—é—á –≤ —Ç–∞–±–ª–∏—Ü—É. –°–≤—è–∂–∏—Ç–µ—Å—å —Å @s3pt1ck."
                            ),
                            chat_id=chat_id,
                            message_id=message_id,
                            parse_mode="Markdown",
                            reply_markup=markup,
                            disable_web_page_preview=True
                        )
                    logger.info(f"YooKassa –æ–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞: {hwid_key} –¥–ª—è {username}")
                    del invoices[chat_id]
                else:
                    markup.add(types.InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data='pay_verify'))
                    markup.add(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã", callback_data='menu_pay'))
                    bot.edit_message_text(
                        (
                            "‚è≥ *–û–ø–ª–∞—Ç–∞ –µ—â–µ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞*\n\n"
                            "–ó–∞–≤–µ—Ä—à–∏—Ç–µ –æ–ø–ª–∞—Ç—É –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. –°–≤—è–∂–∏—Ç–µ—Å—å —Å @s3pt1ck."
                        ),
                        chat_id=chat_id,
                        message_id=message_id,
                        parse_mode="Markdown",
                        reply_markup=markup
                    )

            conn.close()

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã: {e}")
            markup.add(types.InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data='pay_verify'))
            markup.add(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã", callback_data='menu_pay'))
            bot.edit_message_text(
                (
                    "‚ùå *–û—à–∏–±–∫–∞!*\n\n"
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É. –°–≤—è–∂–∏—Ç–µ—Å—å —Å @s3pt1ck."
                ),
                chat_id=chat_id,
                message_id=message_id,
                parse_mode="Markdown",
                reply_markup=markup
            )

    elif data == "menu_faq":
        markup.add(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='menu_main'))
        bot.edit_message_text(
            (
                "‚ùì *FAQ*\n\n"
                "1. –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é?\n"
                "- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–ö—É–ø–∏—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é' –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã.\n\n"
                "2. –ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ –∫–ª—é—á –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç?\n"
                "- –°–≤—è–∂–∏—Ç–µ—Å—å —Å @s3pt1ck.\n\n"
                "3. –ú–æ–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö?\n"
                "- –ù–µ—Ç, –∫–ª—é—á –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –æ–¥–Ω–æ–º—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É."
            ),
            chat_id=chat_id,
            message_id=message_id,
            parse_mode="Markdown",
            reply_markup=markup
        )

    elif data == "menu_support":
        markup.add(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='menu_main'))
        bot.edit_message_text(
            (
                "üìû *–ü–æ–¥–¥–µ—Ä–∂–∫–∞ Valture*\n\n"
                "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–ø—Ä–æ—Å—ã, –ø–∏—à–∏—Ç–µ: @s3pt1ck"
            ),
            chat_id=chat_id,
            message_id=message_id,
            parse_mode="Markdown",
            reply_markup=markup
        )

    bot.answer_callback_query(call.id)

if __name__ == '__main__':
    Thread(target=run_flask).start()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    try:
        bot.polling(non_stop=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ polling: {e}")
        time.sleep(10)
        bot.polling(non_stop=True)
