import os
import logging
import secrets
import base64
from datetime import datetime, timezone, timedelta
from threading import Thread

from flask import Flask

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

import gspread
from google.oauth2.service_account import Credentials

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ---

BOT_TOKEN = os.environ.get("BOT_TOKEN")
SPREADSHEET_NAME = os.environ.get("SPREADSHEET_NAME")

# –õ–∏–±–æ –ø—É—Ç—å –∫ JSON-—Ñ–∞–π–ª—É, –ª–∏–±–æ base64 —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
CREDS_FILE = os.environ.get("CREDS_FILE")  # –ò–º—è —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç–µ –≤ Railway –∫–∞–∫ —Ñ–∞–π–ª

GOOGLE_CREDS_JSON_BASE64 = os.environ.get("GOOGLE_CREDS_JSON_BASE64")  # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ base64

if GOOGLE_CREDS_JSON_BASE64:
    with open("valture-license-bot-account.json", "wb") as f:
        f.write(base64.b64decode(GOOGLE_CREDS_JSON_BASE64))
    CREDS_FILE = "valture-license-bot-account.json"

SCOPE = [
    "https://www.googleapis.com/auth/spreadsheets",
    "https://www.googleapis.com/auth/drive",
]

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- Flask –¥–ª—è keep-alive ---

app = Flask(__name__)

@app.route('/')
def home():
    return "‚úÖ Valture –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

def run_flask():
    port = int(os.environ.get("PORT", 8080))
    app.run(host="0.0.0.0", port=port)

# --- –õ–æ–≥–∏–∫–∞ Telegram –±–æ—Ç–∞ ---

sheet_cache = None

def get_sheet():
    global sheet_cache
    if sheet_cache is None:
        try:
            creds = Credentials.from_service_account_file(CREDS_FILE, scopes=SCOPE)
            client = gspread.authorize(creds)
            sheet_cache = client.open(SPREADSHEET_NAME).sheet1
            logger.info("–£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Google Sheets")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets: {e}")
            raise
    return sheet_cache

def generate_license(length=32):
    try:
        key = ''.join(secrets.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789') for _ in range(length))
        logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∫–ª—é—á: {key}")
        return key
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–∞: {e}")
        raise

def append_license_to_sheet(license_key, username):
    try:
        sheet = get_sheet()
        utc_plus_2 = timezone(timedelta(hours=2))
        now_utc_plus_2 = datetime.now(utc_plus_2)
        now_str = now_utc_plus_2.strftime("%Y-%m-%d %H:%M:%S")
        sheet.append_row([license_key, "", username, now_str])
        logger.info(f"–õ–∏—Ü–µ–Ω–∑–∏—è {license_key} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –¥–ª—è {username}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ª–∏—Ü–µ–Ω–∑–∏–∏: {e}")
        raise

def get_keyboard(buttons):
    return InlineKeyboardMarkup([[InlineKeyboardButton(text, callback_data=callback)] for text, callback in buttons])

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –∫–Ω–æ–ø–æ–∫ ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    welcome_text = (
        "üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Valture!*\n\n"
        "–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –≥–µ–π–º–µ—Ä–æ–≤, "
        "–∫–æ—Ç–æ—Ä—ã–µ —Å—Ç—Ä–µ–º—è—Ç—Å—è –∫ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:"
    )
    await update.message.reply_text(welcome_text, parse_mode="Markdown", reply_markup=get_keyboard([("üìã –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é", "menu_main")]))

async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    buttons = [
        ("‚ÑπÔ∏è –û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏", "menu_about"),
        ("üì∞ –ù–æ–≤–æ—Å—Ç–∏", "menu_news"),
        ("üí≥ –ö—É–ø–∏—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é", "menu_pay"),
        ("‚ùì FAQ", "menu_faq"),
        ("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", "menu_support"),
    ]
    await query.edit_message_text("üè† *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", parse_mode="Markdown", reply_markup=get_keyboard(buttons))

async def about(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    text = (
        "‚ú® *Valture ‚Äî –í–∞—à –ø—É—Ç—å –∫ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤—É –≤ –∏–≥—Ä–∞—Ö*\n\n"
        "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
        "Valture ‚Äî —ç—Ç–æ –ø–µ—Ä–µ–¥–æ–≤–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è –≥–µ–π–º–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –≥–æ—Ç–æ–≤—ã –º–∏—Ä–∏—Ç—å—Å—è —Å –∫–æ–º–ø—Ä–æ–º–∏—Å—Å–∞–º–∏. "
        "–ù–∞—à–∞ –º–∏—Å—Å–∏—è ‚Äî –≤—ã–≤–µ—Å—Ç–∏ –≤–∞—à—É –∏–≥—Ä–æ–≤—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å, –æ–±–µ—Å–ø–µ—á–∏–≤ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø–ª–∞–≤–Ω–æ—Å—Ç—å, "
        "—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∏ –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã. –° Valture –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ, –æ –∫–æ—Ç–æ—Ä–æ–º –≤—Å–µ–≥–¥–∞ –º–µ—á—Ç–∞–ª–∏.\n\n"
        "üî• *–ü–æ—á–µ–º—É –≤—ã–±–∏—Ä–∞—é—Ç Valture?*\n"
        "üöÄ –£–≤–µ–ª–∏—á–µ–Ω–∏–µ FPS –Ω–∞ 20‚Äì30%: –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∞—à–µ–π —Å–∏—Å—Ç–µ–º—ã, —á—Ç–æ–±—ã –¥–æ–±–∏—Ç—å—Å—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —á–∞—Å—Ç–æ—Ç—ã –∫–∞–¥—Ä–æ–≤.\n"
        "üõ°Ô∏è –°—Ç–∞–±–∏–ª—å–Ω—ã–π —Ñ—Ä–µ–π–º—Ä–µ–π—Ç: –ó–∞–±—É–¥—å—Ç–µ –æ –ª–∞–≥–∞—Ö –∏ –ø—Ä–æ—Å–∞–¥–∫–∞—Ö FPS ‚Äî Valture –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø–ª–∞–≤–Ω—ã–π –∏–≥—Ä–æ–≤–æ–π –ø—Ä–æ—Ü–µ—Å—Å.\n"
        "üí° –ú–æ–ª–Ω–∏–µ–Ω–æ—Å–Ω–∞—è –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç—å: –°–æ–∫—Ä–∞—Ç–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã, —á—Ç–æ–±—ã –∫–∞–∂–¥—ã–π –≤–∞—à –∫–ª–∏–∫ –∏–ª–∏ –¥–≤–∏–∂–µ–Ω–∏–µ –±—ã–ª–∏ –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–º–∏.\n"
        "üîã –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è Windows: –ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ –∏–≥—Ä–∞—Ö.\n"
        "üõ≥Ô∏è  –ü–ª–∞–≤–Ω–æ—Å—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è: –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –∏ —á–µ—Ç–∫–æ—Å—Ç—å –º—ã—à–∏ –¥–ª—è –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è –≤ –ª—é–±–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏.\n"
        "üñ•Ô∏è  –ü–ª–∞–≤–Ω–æ—Å—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∏ –≤ –∏–≥—Ä–∞—Ö: –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å —á–µ—Ç–∫–æ–π –∏ –ø–ª–∞–≤–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–æ–π, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–≥—Ä—É–∂–∞–µ—Ç –≤–∞—Å –≤ –∏–≥—Ä—É.\n\n"
        "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
        "_–°–æ–∑–¥–∞–Ω–æ –¥–ª—è –≥–µ–π–º–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ü–µ–Ω—è—Ç –∫–∞—á–µ—Å—Ç–≤–æ –∏ —Å—Ç—Ä–µ–º—è—Ç—Å—è –∫ –ø–æ–±–µ–¥–µ._"
    )
    buttons = [("üîô –ù–∞–∑–∞–¥", "menu_main")]
    await query.edit_message_text(text, parse_mode="Markdown", reply_markup=get_keyboard(buttons))

async def pay(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    text = (
        "üí≥ *–ü—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ –ª–∏—Ü–µ–Ω–∑–∏–∏ Valture*\n\n"
        "–°—Ç–æ–∏–º–æ—Å—Ç—å: *1000 —Ä—É–±–ª–µ–π*\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –ø—Ä—è–º–æ –≤ —á–∞—Ç.\n\n"
        "–ì–æ—Ç–æ–≤—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?"
    )
    buttons = [("‚úÖ –û–ø–ª–∞—Ç–∏—Ç—å", "pay_confirm"), ("üîô –ù–∞–∑–∞–¥", "menu_main")]
    await query.edit_message_text(text, parse_mode="Markdown", reply_markup=get_keyboard(buttons))

# –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ CryptoBot
import aiohttp

CRYPTOBOT_API_TOKEN = os.environ.get("CRYPTOBOT_API_TOKEN")  # –í–∞—à —Ç–æ–∫–µ–Ω –∫—Ä–∏–ø—Ç–æ–±–æ—Ç–∞, —Ç–æ–∂–µ –≤ Variables

async def pay_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # –°–æ–∑–¥–∞–µ–º invoice —á–µ—Ä–µ–∑ CryptoBot API
    invoice_data = {
        "chat_id": query.from_user.id,
        "amount": 1000,  # —Å—É–º–º–∞ –≤ —Ä—É–±–ª—è—Ö
        "currency": "RUB",
        "payload": "valture_license_purchase"
    }

    headers = {
        "Authorization": f"Bearer {CRYPTOBOT_API_TOKEN}",
        "Content-Type": "application/json"
    }

    async with aiohttp.ClientSession() as session:
        async with session.post("https://pay.crypt.bot/invoice", json=invoice_data, headers=headers) as resp:
            if resp.status == 200:
                data = await resp.json()
                pay_url = data.get("pay_url")
                if pay_url:
                    buttons = [[InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=pay_url)]]
                    keyboard = InlineKeyboardMarkup(buttons)
                    await query.edit_message_text("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é:", reply_markup=keyboard)
                    return
            # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –≠—Ö–æ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è webhook-–∞ CryptoBot (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
async def cryptobot_webhook(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç CryptoBot,
    # –Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –∏ –≤—ã–¥–∞—á–∞ –∫–ª—é—á–∞
    pass

async def support(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    text = (
        "üìû *–ü–æ–¥–¥–µ—Ä–∂–∫–∞ Valture*\n\n"
        "–í–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã? –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏:\n"
        "üëâ *@s3pt1ck*\n\n"
        "–ú—ã –æ—Ç–≤–µ—Ç–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±—ã—Å—Ç—Ä–æ!"
    )
    buttons = [("üîô –ù–∞–∑–∞–¥", "menu_main")]
    await query.edit_message_text(text, parse_mode="Markdown", reply_markup=get_keyboard(buttons))

async def faq(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    text = (
        "‚ùì *–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã*\n\n"
        "‚Äî –ö–∞–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é?\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –∫–ª—é—á –ø—Ä–∏–¥–µ—Ç –≤ —ç—Ç–æ—Ç —á–∞—Ç.\n\n"
        "‚Äî –ú–æ–∂–Ω–æ –ª–∏ –≤–µ—Ä–Ω—É—Ç—å –¥–µ–Ω—å–≥–∏?\n"
        "–ü–æ–ª–∏—Ç–∏–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –æ–ø–∏—Å–∞–Ω–∞ –≤ —É—Å–ª–æ–≤–∏—è—Ö –Ω–∞ —Å–∞–π—Ç–µ.\n\n"
        "‚Äî –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ?\n"
        "–î–∞, –ª–∏—Ü–µ–Ω–∑–∏—è –¥–µ–π—Å—Ç–≤—É–µ—Ç –Ω–∞ –≤—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."
    )
    buttons = [("üîô –ù–∞–∑–∞–¥", "menu_main")]
    await query.edit_message_text(text, parse_mode="Markdown", reply_markup=get_keyboard(buttons))

async def news(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    text = (
        "üì∞ *–ù–æ–≤–æ—Å—Ç–∏ Valture*\n\n"
        "- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ 1.2: —É–ª—É—á—à–µ–Ω–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å\n"
        "- –°–∫–æ—Ä–æ —Å–∫–∏–¥–∫–∏ –Ω–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏!\n"
        "- –°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –∑–¥–µ—Å—å."
    )
    buttons = [("üîô –ù–∞–∑–∞–¥", "menu_main")]
    await query.edit_message_text(text, parse_mode="Markdown", reply_markup=get_keyboard(buttons))

async def unknown(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data

    if data == "menu_main":
        await main_menu(update, context)
    elif data == "menu_about":
        await about(update, context)
    elif data == "menu_pay":
        await pay(update, context)
    elif data == "pay_confirm":
        await pay_confirm(update, context)
    elif data == "menu_support":
        await support(update, context)
    elif data == "menu_faq":
        await faq(update, context)
    elif data == "menu_news":
        await news(update, context)
    else:
        await query.answer("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞", show_alert=True)

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ ---

def main():
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    Thread(target=run_flask).start()

    # –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram –±–æ—Ç–∞
    application = Application.builder().token(BOT_TOKEN).build()

    # –ö–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start))

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(button_handler))

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler(None, unknown))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

if __name__ == "__main__":
    main()
