import os
import logging
import secrets
import requests
import base64
import json
from datetime import datetime, timezone, timedelta
from threading import Thread
from uuid import uuid4

from flask import Flask, request, jsonify
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

import gspread
from google.oauth2.service_account import Credentials
from yookassa import Configuration, Payment

BOT_TOKEN = os.environ.get("BOT_TOKEN")
CRYPTOBOT_API_TOKEN = os.environ.get("CRYPTOBOT_API_TOKEN")
YOOKASSA_SHOP_ID = os.environ.get("YOOKASSA_SHOP_ID")
YOOKASSA_SECRET_KEY = os.environ.get("YOOKASSA_SECRET_KEY")
CREDS_FILE = os.environ.get("CREDS_FILE", "creds.json")
SPREADSHEET_NAME = os.environ.get("SPREADSHEET_NAME", "Valture_Licenses")
GOOGLE_CREDS_JSON_BASE64 = os.environ.get("GOOGLE_CREDS_JSON_BASE64")
EXE_FILE_PATH = os.environ.get("EXE_FILE_PATH", "valture_app.exe")
APP_DOWNLOAD_LINK = os.environ.get("APP_DOWNLOAD_LINK", "https://www.dropbox.com/scl/fi/ze5ebd909z2qeaaucn56q/VALTURE.exe?rlkey=ihdzk8voej4oikrdhq0wfzvbb&st=jj5tgroa&dl=1")
SCOPE = [
    "https://www.googleapis.com/auth/spreadsheets",
    "https://www.googleapis.com/auth/drive",
]
ADMIN_IDS = [123456789]

PRICES = {
    "crypto_ton": 4.0,
    "yookassa_rub": 1000.0,
    "usd_equivalent": 12.7
}

CRYPTO_BOT_API = "https://pay.crypt.bot/api"

if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
if not YOOKASSA_SHOP_ID or not YOOKASSA_SECRET_KEY:
    logging.warning("YooKassa credentials –Ω–µ –∑–∞–¥–∞–Ω—ã, –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ YooKassa –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å")
else:
    Configuration.account_id = YOOKASSA_SHOP_ID
    Configuration.secret_key = YOOKASSA_SECRET_KEY
if not CRYPTOBOT_API_TOKEN:
    logging.warning("CRYPTOBOT_API_TOKEN –Ω–µ –∑–∞–¥–∞–Ω, –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ CryptoBot –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å")

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.DEBUG,
    handlers=[
        logging.FileHandler("bot.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

app = Flask(__name__)

@app.route('/')
def home():
    return "‚úÖ Valture –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

@app.route('/test-crypto-api')
def test_crypto_api():
    try:
        headers = {"Crypto-Pay-API-Token": CRYPTOBOT_API_TOKEN}
        response = requests.get(f"{CRYPTO_BOT_API}/getMe", headers=headers, timeout=10)
        return f"API Response: {response.json()}"
    except Exception as e:
        return f"Error: {str(e)}"

@app.route('/yookassa-webhook', methods=['POST'])
def yookassa_webhook():
    try:
        event_json = request.get_json()
        logger.debug(f"YooKassa webhook received: {event_json}")
        
        if not event_json or 'event' not in event_json or 'object' not in event_json:
            logger.error("Invalid webhook payload")
            return jsonify({"status": "error", "message": "Invalid payload"}), 400

        event = event_json['event']
        payment_object = event_json['object']
        
        if event == 'payment.succeeded':
            payment_id = payment_object['id']
            metadata = payment_object.get('metadata', {})
            user_id = metadata.get('user_id')
            username = metadata.get('username')
            
            if not user_id or not username:
                logger.error(f"Missing metadata in webhook: user_id={user_id}, username={username}")
                return jsonify({"status": "error", "message": "Missing metadata"}), 400

            from application import application
            job_queue = application.job_queue
            job_queue.run_once(
                process_yookassa_payment,
                0,
                context={
                    'payment_id': payment_id,
                    'user_id': int(user_id),
                    'username': username,
                    'chat_id': int(user_id)
                },
                name=f"yookassa_payment_{payment_id}"
            )
            logger.info(f"YooKassa payment succeeded: payment_id={payment_id}, user={username}")
            return jsonify({"status": "ok"}), 200
        
        elif event == 'payment.canceled':
            logger.warning(f"YooKassa payment canceled: payment_id={payment_object['id']}")
            return jsonify({"status": "ok"}), 200
        
        return jsonify({"status": "ignored"}), 200
    
    except Exception as e:
        logger.error(f"Error in YooKassa webhook: {e}", exc_info=True)
        return jsonify({"status": "error", "message": str(e)}), 500

async def process_yookassa_payment(context: ContextTypes.DEFAULT_TYPE):
    job_context = context.job.context
    payment_id = job_context['payment_id']
    user_id = job_context['user_id']
    username = job_context['username']
    chat_id = job_context['chat_id']

    try:
        payment = Payment.find_one(payment_id)
        if payment.status != 'succeeded':
            logger.warning(f"YooKassa payment {payment_id} not succeeded, status: {payment.status}")
            await context.bot.send_message(
                chat_id=chat_id,
                text="‚è≥ –û–ø–ª–∞—Ç–∞ –µ—â—ë –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ /query_payment –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @s3pt1ck.",
                parse_mode="Markdown"
            )
            return

        license_key = generate_license()
        append_license_to_sheet(license_key, username)
        text = (
            "üéâ *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–∫—É–ø–∫–æ–π!*\n\n"
            f"üì• –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Valture: [–°–∫–∞—á–∞—Ç—å]({APP_DOWNLOAD_LINK})\n\n"
            "‚ö†Ô∏è –ü–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª –∞–Ω—Ç–∏–≤–∏—Ä—É—Å–æ–º.\n\n"
            "–í–∞—à HWID-–∫–ª—é—á:\n"
            f"`{license_key}`\n\n"
            "–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –µ–≥–æ –≤ –Ω–∞–¥—ë–∂–Ω–æ–º –º–µ—Å—Ç–µ! üöÄ"
        )
        await context.bot.send_message(
            chat_id=chat_id,
            text=text,
            parse_mode="Markdown",
            disable_web_page_preview=True
        )
        
        try:
            if os.path.exists(EXE_FILE_PATH):
                file_size = os.path.getsize(EXE_FILE_PATH) / (1024 * 1024)
                if file_size < 50:
                    with open(EXE_FILE_PATH, "rb") as file:
                        await context.bot.send_document(
                            chat_id=chat_id,
                            document=file,
                            filename="Valture.exe",
                            caption="üì• –í–æ—Ç –≤–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Valture!"
                        )
                    logger.info(f"–§–∞–π–ª {EXE_FILE_PATH} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username}")
                else:
                    await context.bot.send_message(
                        chat_id=chat_id,
                        text="üì• –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Å—ã–ª–∫—É –≤—ã—à–µ.",
                        parse_mode="Markdown"
                    )
                    logger.warning(f"–§–∞–π–ª {EXE_FILE_PATH} —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {file_size} –ú–ë")
            else:
                await context.bot.send_message(
                    chat_id=chat_id,
                    text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Å—ã–ª–∫—É –≤—ã—à–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @s3pt1ck.",
                    parse_mode="Markdown"
                )
                logger.error(f"–§–∞–π–ª {EXE_FILE_PATH} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ {EXE_FILE_PATH}: {e}", exc_info=True)
            await context.bot.send_message(
                chat_id=chat_id,
                text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Å—ã–ª–∫—É –≤—ã—à–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @s3pt1ck.",
                parse_mode="Markdown"
            )

        logger.info(f"YooKassa payment processed, HWID key issued: {license_key} –¥–ª—è {username}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ YooKassa –ø–ª–∞—Ç–µ–∂–∞ {payment_id}: {e}", exc_info=True)
        error_text = (
            "‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!*\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–∞—Ç—å –∫–ª—é—á –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /query_payment –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @s3pt1ck."
        )
        await context.bot.send_message(
            chat_id=chat_id,
            text=error_text,
            parse_mode="Markdown"
        )

def run_flask():
    port = int(os.environ.get("PORT", 8080))
    app.run(host="0.0.0.0", port=port)

def setup_google_creds():
    logger.debug("–ü—Ä–æ–≤–µ—Ä–∫–∞ Google credentials...")
    if GOOGLE_CREDS_JSON_BASE64:
        try:
            creds_json = base64.b64decode(GOOGLE_CREDS_JSON_BASE64).decode("utf-8")
            with open(CREDS_FILE, "w") as f:
                f.write(creds_json)
            logger.info("Google credentials —É—Å–ø–µ—à–Ω–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ Google credentials: {e}", exc_info=True)
            raise
    elif not os.path.exists(CREDS_FILE):
        logger.error("–§–∞–π–ª Google credentials –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏ GOOGLE_CREDS_JSON_BASE64 –Ω–µ –∑–∞–¥–∞–Ω")
        raise FileNotFoundError("–§–∞–π–ª Google credentials –Ω–µ –Ω–∞–π–¥–µ–Ω")
    else:
        logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª Google credentials")

sheet_cache = None

def get_sheet():
    global sheet_cache
    if sheet_cache is None:
        try:
            setup_google_creds()
            creds = Credentials.from_service_account_file(CREDS_FILE, scopes=SCOPE)
            client = gspread.authorize(creds)
            sheet_cache = client.open(SPREADSHEET_NAME).sheet1
            logger.info("–£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Google Sheets")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets: {e}", exc_info=True)
            raise
    return sheet_cache

def generate_license(length=16):
    try:
        key = ''.join(secrets.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789') for _ in range(length))
        logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∫–ª—é—á: {key}")
        return key
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–∞: {e}", exc_info=True)
        raise

def append_license_to_sheet(license_key, username):
    try:
        sheet = get_sheet()
        utc_plus_2 = timezone(timedelta(hours=2))
        now_utc_plus_2 = datetime.now(utc_plus_2)
        now_str = now_utc_plus_2.strftime("%Y-%m-%d %H:%M:%S")
        sheet.append_row([license_key, "", username, now_str])
        logger.info(f"–õ–∏—Ü–µ–Ω–∑–∏—è {license_key} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –¥–ª—è {username}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ª–∏—Ü–µ–Ω–∑–∏–∏: {e}", exc_info=True)
        raise

def create_crypto_invoice(amount=4.0, asset="TON", description="Valture License"):
    logger.debug(f"–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞: amount={amount}, asset={asset}, description={description}")
    if not CRYPTOBOT_API_TOKEN:
        logger.error("CRYPTOBOT_API_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return None, "CRYPTOBOT_API_TOKEN –Ω–µ –∑–∞–¥–∞–Ω"

    try:
        payload = {
            "amount": f"{amount:.8f}",
            "asset": asset,
            "description": description,
            "order_id": secrets.token_hex(16),
        }
        headers = {
            "Crypto-Pay-API-Token": CRYPTOBOT_API_TOKEN,
            "Content-Type": "application/json"
        }
        logger.debug(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ {CRYPTO_BOT_API}/createInvoice —Å payload: {payload}")
        
        response = requests.post(f"{CRYPTO_BOT_API}/createInvoice", json=payload, headers=headers, timeout=10)
        logger.debug(f"HTTP —Å—Ç–∞—Ç—É—Å: {response.status_code}, –û—Ç–≤–µ—Ç: {response.text}")
        
        response.raise_for_status()
        data = response.json()
        
        if data.get("ok"):
            invoice = data["result"]
            logger.info(f"–ò–Ω–≤–æ–π—Å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: invoice_id={invoice['invoice_id']}, pay_url={invoice.get('pay_url')}")
            return invoice, None
        else:
            error_msg = data.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –æ—Ç CryptoBot")
            logger.error(f"–û—à–∏–±–∫–∞ API CryptoBot: {error_msg}")
            return None, f"–û—à–∏–±–∫–∞ API: {error_msg}"
            
    except requests.exceptions.HTTPError as http_err:
        logger.error(f"HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞: {http_err}, –û—Ç–≤–µ—Ç: {response.text}", exc_info=True)
        return None, f"HTTP –æ—à–∏–±–∫–∞: {http_err}"
    except requests.exceptions.Timeout:
        logger.error("–¢–∞–π–º-–∞—É—Ç –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ CryptoBot API", exc_info=True)
        return None, "–¢–∞–π–º-–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ CryptoBot API"
    except requests.exceptions.RequestException as req_err:
        logger.error(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞: {req_err}", exc_info=True)
        return None, f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: {req_err}"
    except Exception as e:
        logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞: {e}", exc_info=True)
        return None, f"–û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}"

def check_invoice_status(invoice_id):
    logger.debug(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω–≤–æ–π—Å–∞: invoice_id={invoice_id}")
    try:
        headers = {"Crypto-Pay-API-Token": CRYPTOBOT_API_TOKEN}
        response = requests.get(f"{CRYPTO_BOT_API}/getInvoices?invoice_ids={invoice_id}", headers=headers, timeout=10)
        logger.debug(f"HTTP —Å—Ç–∞—Ç—É—Å: {response.status_code}, –û—Ç–≤–µ—Ç: {response.text}")
        response.raise_for_status()
        data = response.json()
        if data.get("ok"):
            status = data["result"]["items"][0]["status"]
            logger.info(f"–°—Ç–∞—Ç—É—Å –∏–Ω–≤–æ–π—Å–∞ {invoice_id}: {status}")
            return status
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω–≤–æ–π—Å–∞: {data.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            return None
    except requests.exceptions.HTTPError as http_err:
        logger.error(f"HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏–Ω–≤–æ–π—Å–∞: {http_err}, –û—Ç–≤–µ—Ç: {response.text}", exc_info=True)
        return None
    except requests.exceptions.RequestException as req_err:
        logger.error(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏–Ω–≤–æ–π—Å–∞: {req_err}", exc_info=True)
        return None
    except Exception as e:
        logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏–Ω–≤–æ–π—Å–∞: {e}", exc_info=True)
        return None

def create_yookassa_payment(amount, description, user_id, username):
    logger.debug(f"–°–æ–∑–¥–∞–Ω–∏–µ YooKassa –ø–ª–∞—Ç–µ–∂–∞: amount={amount}, description={description}, user_id={user_id}")
    if not YOOKASSA_SHOP_ID or not YOOKASSA_SECRET_KEY:
        logger.error("YOOKASSA_SHOP_ID –∏–ª–∏ YOOKASSA_SECRET_KEY –Ω–µ –∑–∞–¥–∞–Ω—ã")
        return None, "YooKassa credentials not configured"

    try:
        idempotence_key = str(uuid4())
        payment = Payment.create({
            "amount": {
                "value": f"{amount:.2f}",
                "currency": "RUB"
            },
            "confirmation": {
                "type": "redirect",
                "return_url": "https://t.me/valture_buy_bot"
            },
            "capture": True,
            "description": description,
            "metadata": {
                "user_id": str(user_id),
                "username": username
            }
        }, idempotence_key)

        logger.info(f"YooKassa –ø–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω: payment_id={payment.id}")
        return payment, None

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ YooKassa –ø–ª–∞—Ç–µ–∂–∞: {e}", exc_info=True)
        return None, f"YooKassa –æ—à–∏–±–∫–∞: {str(e)}"

async def check_yookassa_payment(context: ContextTypes.DEFAULT_TYPE):
    job_context = context.job.context
    payment_id = job_context['payment_id']
    user_id = job_context['user_id']
    username = job_context['username']
    chat_id = job_context['chat_id']
    attempts = job_context.get('attempts', 0)

    try:
        payment = Payment.find_one(payment_id)
        logger.debug(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ YooKassa –ø–ª–∞—Ç–µ–∂–∞ {payment_id}, —Å—Ç–∞—Ç—É—Å: {payment.status}")
        if payment.status == 'succeeded':
            license_key = generate_license()
            append_license_to_sheet(license_key, username)
            text = (
                "üéâ *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–∫—É–ø–∫–æ–π!*\n\n"
                f"üì• –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Valture: [–°–∫–∞—á–∞—Ç—å]({APP_DOWNLOAD_LINK})\n\n"
                "‚ö†Ô∏è –ü–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª –∞–Ω—Ç–∏–≤–∏—Ä—É—Å–æ–º.\n\n"
                "–í–∞—à HWID-–∫–ª—é—á:\n"
                f"`{license_key}`\n\n"
                "–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –µ–≥–æ –≤ –Ω–∞–¥–µ–∂–Ω–æ–º –º–µ—Å—Ç–µ! üöÄ"
            )
            await context.bot.send_message(
                chat_id=chat_id,
                text=text,
                parse_mode="Markdown",
                disable_web_page_preview=True
            )
            
            try:
                if os.path.exists(EXE_FILE_PATH):
                    file_size = os.path.getsize(EXE_FILE_PATH) / (1024 * 1024)
                    if file_size < 50:
                        with open(EXE_FILE_PATH, "rb") as file:
                            await context.bot.send_document(
                                chat_id=chat_id,
                                document=file,
                                filename="Valture.exe",
                                caption="üì• –í–æ—Ç –≤–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Valture!"
                            )
                        logger.info(f"–§–∞–π–ª {EXE_FILE_PATH} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username}")
                    else:
                        await context.bot.send_message(
                            chat_id=chat_id,
                            text="üì• –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Å—ã–ª–∫—É –≤—ã—à–µ.",
                            parse_mode="Markdown"
                        )
                        logger.warning(f"–§–∞–π–ª {EXE_FILE_PATH} —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {file_size} –ú–ë")
                else:
                    await context.bot.send_message(
                        chat_id=chat_id,
                        text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Å—ã–ª–∫—É –≤—ã—à–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @s3pt1ck.",
                        parse_mode="Markdown"
                    )
                    logger.error(f"–§–∞–π–ª {EXE_FILE_PATH} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ {EXE_FILE_PATH}: {e}", exc_info=True)
                await context.bot.send_message(
                    chat_id=chat_id,
                    text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Å—ã–ª–∫—É –≤—ã—à–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @s3pt1ck.",
                    parse_mode="Markdown"
                )

            logger.info(f"YooKassa payment {payment_id} confirmed, HWID key issued: {license_key} –¥–ª—è {username}")
            return
        elif payment.status == 'canceled':
            await context.bot.send_message(
                chat_id=chat_id,
                text="‚ùå *–û–ø–ª–∞—Ç–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞*\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @s3pt1ck.",
                parse_mode="Markdown"
            )
            logger.info(f"YooKassa payment {payment_id} canceled")
            return
        else:
            attempts += 1
            if attempts < 15:
                context.job_queue.run_once(
                    check_yookassa_payment,
                    12,
                    context={**job_context, 'attempts': attempts},
                    name=f"check_yookassa_{payment_id}_{attempts}"
                )
            else:
                await context.bot.send_message(
                    chat_id=chat_id,
                    text="‚è≥ *–û–ø–ª–∞—Ç–∞ –µ—â–µ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞*\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ /query_payment –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @s3pt1ck.",
                    parse_mode="Markdown"
                )
                logger.warning(f"YooKassa payment {payment_id} not confirmed after 15 attempts")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ YooKassa –ø–ª–∞—Ç–µ–∂–∞ {payment_id}: {e}", exc_info=True)
        await context.bot.send_message(
            chat_id=chat_id,
            text="‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–ø–ª–∞—Ç—ã*\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ /query_payment –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @s3pt1ck.",
            parse_mode="Markdown"
        )

async def check_crypto_payment(context: ContextTypes.DEFAULT_TYPE):
    job_context = context.job.context
    invoice_id = job_context['invoice_id']
    user_id = job_context['user_id']
    username = job_context['username']
    chat_id = job_context['chat_id']
    attempts = job_context.get('attempts', 0)

    try:
        status = check_invoice_status(invoice_id)
        logger.debug(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ CryptoBot –∏–Ω–≤–æ–π—Å–∞: {invoice_id}, status: {status}")
        if status == 'paid':
            license_key = generate_license()
            append_license_to_sheet(license_key, username)
            text = (
                "üéâ *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–∫—É–ø–∫–æ–π!*\n\n"
                f"üì• –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Valture: [–°–∫–∞—á–∞—Ç—å]({APP_DOWNLOAD_LINK})\n\n"
                "‚ö†Ô∏è –ü–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª –∞–Ω—Ç–∏–≤–∏—Ä—É—Å–æ–º.\n\n"
                "–í–∞—à HWID-–∫–ª—é—á:\n"
                f"`{license_key}`\n\n"
                "–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –µ–≥–æ –≤ –Ω–∞–¥–µ–∂–Ω–æ–º –º–µ—Å—Ç–µ! üöÄ"
            )
            await context.bot.send_message(
                chat_id=chat_id,
                text=text,
                parse_mode="Markdown",
                disable_web_page_preview=True
            )
            
            try:
                if os.path.exists(EXE_FILE_PATH):
                    file_size = os.path.getsize(EXE_FILE_PATH) / (1024 * 1024)
                    if file_size < 50:
                        with open(EXE_FILE_PATH, "rb") as file:
                            await context.bot.send_document(
                                chat_id=chat_id,
                                document=file,
                                filename="Valture.exe",
                                caption="üì• –í–æ—Ç –≤–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Valture!"
                            )
                        logger.info(f"–§–∞–π–ª {EXE_FILE_PATH} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username}")
                    else:
                        await context.bot.send_message(
                            chat_id=chat_id,
                            text="üì• –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Å—ã–ª–∫—É –≤—ã—à–µ.",
                            parse_mode="Markup"
                        )
                        logger.warning(f"–§–∞–π–ª {EXE_FILE_PATH} —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {file_size} –ú–ë")
                else:
                    await context.bot.send_message(
                        chat_id=chat_id,
                        text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Å—ã–ª–∫—É –≤—ã—à–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @s3pt1ck.",
                        parse_mode="Markdown"
                    )
                    logger.error(f"–§–∞–π–ª {EXE_FILE_PATH} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ {EXE_FILE_PATH}: {e}", exc_info=True)
                await context.bot.send_message(
                    chat_id=chat_id,
                    text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Å—ã–ª–∫—É –≤—ã—à–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @s3pt1ck.",
                    parse_mode="Markup"
                )

            logger.info(f"CryptoBot payment {invoice_id} confirmed, HWID key issued: {license_key} –¥–ª—è {username}")
            return
        elif status in ['expired', 'failed']:
            await context.bot.send_message(
                chat_id=chat_id,
                text="‚ùå *–û–ø–ª–∞—Ç–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–∞*\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @s3pt1ck.",
                parse_mode="Markdown"
            )
            logger.warning(f"CryptoBot payment {invoice_id} {status}")
            return
        else:
            attempts += 1
            if attempts < 15:
                context.job_queue.run_once(
                    check_crypto_payment,
                    12,
                    context={**job_context, 'attempts': attempts},
                    name=f"check_crypto_{invoice_id}_{attempts}"
                )
            else:
                await context.bot.send_message(
                    chat_id=chat_id,
                    text="‚è≥ *–û–ø–ª–∞—Ç–∞ –µ—â–µ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞*\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ /query_payment –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @s3pt1ck.",
                    parse_mode="Markdown"
                )
                logger.warning(f"CryptoBot payment {invoice_id} not confirmed after 15 attempts")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ CryptoBot –∏–Ω–≤–æ–π—Å–∞ {invoice_id}: {e}", exc_info=True)
        await context.bot.send_message(
            chat_id=chat_id,
            text="‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–ø–ª–∞—Ç—ã*\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ /query_payment –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @s3pt1ck.",
            parse_mode="Markdown"
        )

async def query_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    username = update.message.from_user.username or update.message.from_user.full_name
    chat_id = update.message.chat_id
    args = context.args

    payment_type = context.user_data.get("payment_type")
    payment_id = context.user_data.get("payment_id") or context.user_data.get("invoice_id")

    if args and len(args) == 1:
        payment_id = args[0]
        payment_type = "yookassa"
        logger.info(f"–†—É—á–Ω–æ–π –≤–≤–æ–¥ payment_id: {payment_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {username}")

    if not payment_type or not payment_id:
        await update.message.reply_text(
            "‚ùå *–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –æ–ø–ª–∞—Ç–µ*\n\n"
            "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å ID –ø–ª–∞—Ç–µ–∂–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /query_payment <ID_–ø–ª–∞—Ç–µ–∂–∞>\n"
            "–ò–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @s3pt1ck.",
            parse_mode="Markdown"
        )
        return

    try:
        if payment_type == "yookassa":
            payment = Payment.find_one(payment_id)
            if payment.status == 'succeeded':
                license_key = generate_license()
                append_license_to_sheet(license_key, username)
                text = (
                    "üéâ *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–∫—É–ø–∫–æ–π!*\n\n"
                    f"üì• –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Valture: [–°–∫–∞—á–∞—Ç—å]({APP_DOWNLOAD_LINK})\n\n"
                    "‚ö†Ô∏è –ü–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª –∞–Ω—Ç–∏–≤–∏—Ä—É—Å–æ–º.\n\n"
                    "–í–∞—à HWID-–∫–ª—é—á:\n"
                    f"`{license_key}`\n\n"
                    "–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –µ–≥–æ –≤ –Ω–∞–¥–µ–∂–Ω–æ–º –º–µ—Å—Ç–µ! üöÄ"
                )
                await context.bot.send_message(
                    chat_id=chat_id,
                    text=text,
                    parse_mode="Markdown",
                    disable_web_page_preview=True
                )
                
                try:
                    if os.path.exists(EXE_FILE_PATH):
                        file_size = os.path.getsize(EXE_FILE_PATH) / (1024 * 1024)
                        if file_size < 50:
                            with open(EXE_FILE_PATH, "rb") as file:
                                await context.bot.send_document(
                                    chat_id=chat_id,
                                    document=file,
                                    filename="Valture.exe",
                                    caption="üì• –í–æ—Ç –≤–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Valture!"
                                )
                            logger.info(f"–§–∞–π–ª {EXE_FILE_PATH} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username}")
                        else:
                            await context.bot.send_message(
                                chat_id=chat_id,
                                text="üì• –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Å—ã–ª–∫—É –≤—ã—à–µ.",
                                parse_mode="Markdown"
                            )
                            logger.warning(f"–§–∞–π–ª {EXE_FILE_PATH} —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {file_size} –ú–ë")
                    else:
                        await context.bot.send_message(
                            chat_id=chat_id,
                            text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Å—ã–ª–∫—É –≤—ã—à–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @s3pt1ck.",
                            parse_mode="Markdown"
                        )
                        logger.error(f"–§–∞–π–ª {EXE_FILE_PATH} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ {EXE_FILE_PATH}: {e}", exc_info=True)
                    await context.bot.send_message(
                        chat_id=chat_id,
                        text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Å—ã–ª–∫—É –≤—ã—à–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @s3pt1ck.",
                        parse_mode="Markdown"
                    )

                logger.info(f"YooKassa payment {payment_id} confirmed via /query_payment, HWID key issued: {license_key}")
                context.user_data.clear()
            else:
                await update.message.reply_text(
                    f"‚è≥ *–û–ø–ª–∞—Ç–∞ –µ—â–µ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞*\n\n–°—Ç–∞—Ç—É—Å: {payment.status}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ /query_payment –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @s3pt1ck.",
                    parse_mode="Markdown"
                )
        elif payment_type == "crypto":
            status = check_invoice_status(payment_id)
            if status == 'paid':
                license_key = generate_license()
                append_license_to_sheet(license_key, username)
                text = (
                    "üéâ *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–∫—É–ø–∫–æ–π!*\n\n"
                    f"üì• –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Valture: [–°–∫–∞—á–∞—Ç—å]({APP_DOWNLOAD_LINK})\n\n"
                    "‚ö†Ô∏è –ü–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª –∞–Ω—Ç–∏–≤–∏—Ä—É—Å–æ–º.\n\n"
                    "–í–∞—à HWID-–∫–ª—é—á:\n"
                    f"`{license_key}`

                    "\n\n"
                    "–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –µ–≥–æ –≤ –Ω–∞–¥–µ–∂–Ω–æ–º –º–µ—Å—Ç–µ! üöñ"
                )
                await context.bot.send_message(
                    chat_id,
                    text=text,
                    parse_mode="markdown",
                    disable_web_page_preview=True
                )

                try:
                    if os.path.exists(EXE_FILE_PATH):
                        file_size = os.path.getsize(EXE_FILE_PATH) / (1024 * 1024)
                        if file_size < 50:
                            with open(EXE_FILE_PATH, "rb") as file:
                                await context.bot.send_document(
                                    chat_id=chat_id,
                                    document=file,
                                    filename="Valture.exe",
                                    caption="üìñ –°–∫–∞—á–∞–π—Ç–µ –≤–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Valture!"
                                )
                            logger.info(f"–§–∞–π–ª {EXE_FILE_PATH} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username}")
                        else:
                            await context.bot.send_message(
                                chat_id=chat_id,
                                text="üìñ –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Å—ã–ª–∫—É –≤—ã—à–µ.",
                                parse_mode="Markdown"
                            )
                            logger.warning(f"–§–∞–π–ª {EXE_FILE_PATH} —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {file_size} –ú–ë")
                    else:
                        await context.bot.send_message(
                            chat_id=chat_id,
                            text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Å—ã–ª–∫—É –≤—ã—à–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @s3pt1ck.",
                            parse_mode="Markdown"
                        )
                        logger.error(f"–§–∞–π–ª {EXE_FILE_PATH} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ {EXE_FILE_PATH}: {e}", exc_info=True)
                    await context.bot.send_message(
                        chat_id=chat_id,
                        text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Å—ã–ª–∫—É –≤—ã—à–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @s3pt1ck.",
                        parse_mode="Markdown"
                    )

                logger.info(f"CryptoBot payment {payment_id} confirmed via /query_payment, HWID key issued: {license_key}")
                context.user_data.clear()
            else:
                await update.message.reply_text(
                    f"‚è≥ *–û–ø–ª–∞—Ç–∞ –µ—â–µ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞*\n\n–°—Ç–∞—Ç—É—Å: {status or '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ /query_payment –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @s3pt1ck.",
                    parse_mode="Markdown"
                )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ /query_payment –¥–ª—è {payment_id}: {e}", exc_info=True)
        await update.message.reply_text(
            "‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–ø–ª–∞—Ç—ã*\n\n–°–≤—è–∂–∏—Ç–µ—Å—å —Å @s3pt1ck –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏.",
            parse_mode="Markdown"
        )

async def check_logs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id not in ADMIN_IDS:
        logger.error(f"–ù–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –ª–æ–≥–∞–º: ID {user_id}")
        await update.message.reply_text(
            "‚ö†Ô∏è *–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω*\n\n–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.",
            parse_mode="Markdown"
        )
        return

    try:
        with open("bot.log", "r") as log_file:
            lines = log_file.readlines()
            payment_logs = [line for line in lines[-100:] if "payment" in line.lower() or "webhook" in line.lower()]
            log_text = "".join(payment_logs[-50:])
            if not log_text:
                log_text = "–ù–µ—Ç –Ω–µ–¥–∞–≤–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö –ª–æ–≥–æ–≤."
        await update.message.reply_text(
            f"üìú *–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ –ø–ª–∞—Ç–µ–∂–µ–π:\n\n{log_text}",
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ª–æ–≥–æ–≤: {e}")
        await update.message.reply_text(
            "‚ùå *–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ª–æ–≥–∞–º*\n\n–°–≤—è–∂–∏—Ç–µ—Å—å —Å @s3pt1ck.",
            parse_mode="Markdown"
        )

def get_keyboard(buttons):
    return InlineKeyboardMarkup([[InlineKeyboardButton(text, callback_data=callback)] for text, callback in buttons])

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "üéÆ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Valture!*\n\n"
        "–í–∞—à –ª—É—á—à–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∏–≥—Ä! üöñ\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:"
        
    )
    buttons = [
        ("üèñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "menu_main"),
    ]
    await update.message.reply_text(
        text=text,
        parse_mode="markdown",
        reply_markup=get_keyboard(buttons)

async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    buttons = [
        ("‚ÑπÔ∏è –û –Ω–∞—Å", "menu_about"),
        ("üóû –ù–æ–≤–æ—Å—Ç–∏", "news_info"),
        ("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", "menu_pay"),
        ("‚ùì FAQ", "menu_faq"),
        ("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", "menu_support"),
    ]
    text = (
        "üèñÔ∏è *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:"
    )
    
    await query.edit_message_text(
        text=text,
        parse_mode="markdown",
        reply_markup=get_keyboard(buttons)
    )

async def about(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    text = (
        "‚ú® *Valture ‚Äî –í–∞—à –ø—É—Ç—å –∫ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤—É!*\n\n"
        "‚ûñ‚ûñ‚ûñ‚¨õÔ∏è‚ûñÔ∏è‚¨úÔ∏è"
        "Valture ‚Äî —ç—Ç–æ –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –≥–µ–π–º–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –≥–æ—Ç–æ–≤—ã –∏–¥—Ç–∏ –Ω–∞ –∫–æ–º–ø—Ä–æ–º–∏—Å—Å—ã. "
        "–ú—ã —Å—Ç—Ä–µ–º–∏–º—Å—è –≤—ã–≤–µ—Å—Ç–∏ –≤–∞—à—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø–ª–∞–≤–Ω–æ—Å—Ç—å, "
        "—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∏ –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã. –° Valture –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ, –æ –∫–æ—Ç–æ—Ä–æ–º –º–µ—á—Ç–∏—Ç–µ!\n\n"
        "üî• *–ü–æ—á–µ–º—É –≤—ã–±–∏—Ä–∞—é—Ç –Ω–∞—Å?*\n\n"
        "- üöñ *–£–≤–µ–ª–∏—á–µ–Ω–∏–µ FPS –Ω–∞ 20‚Äì30%*: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.\n"
        "- ‚úîÔ∏è *–°—Ç–∞–±–∏–ª—å–Ω—ã–π —Ñ—Ä–µ–π–º—Ä–µ–π—Ç*: –ù–∏–∫–∞–∫–∏—Ö –ª–∞–≥–æ–≤ –∏ –ø—Ä–æ—Å–∞–¥–æ–∫ FPS.\n"
        "- ‚ùì *–ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è*: –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π.\n"
        "- üí° *–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è Windows*: –ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –û–° –¥–ª—è –∏–≥—Ä.\n"
        "- üñê *–ü–ª–∞–≤–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ*: –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –º—ã—à–∏.\n"
        "- üñ• *–ü–ª–∞–≤–Ω–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞*: –ß–µ—Ç–∫–∞—è –∏ –ø–ª–∞–≤–Ω–∞—è –≥—Ä–∞—Ñ–∏–∫–∞.\n"
        "‚ûñ‚ûñ\n"
        "_–°–æ–∑–¥–∞–Ω–æ –¥–ª—è –≥–µ–π–º–µ—Ä–æ–≤, —Å—Ç—Ä–µ–º—è—â–∏—Ö—Å—è –∫ –ø–æ–±–µ–¥–∞–º._"
    )
    buttons = [
        ("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "menu_main"),
    ]
    await query.edit_message_text(
        text=text,
        parse_mode="markdown",
        reply_markup=get_keyboard(buttons)
    )

async def pay(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    text = (
        "üí∏ *–ü–æ–∫—É–ø–∫–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏ Valture*\n\n"
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å: *{PRICES['crypto_ton']} TON* –∏–ª–∏ *{PRICES['yookassa_rub']} RUB (~${PRICES['usd_equivalent']})*\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:\n"
        "- *CryptoBot*: –æ–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π.\n"
        "- *YooKassa*: –æ–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π.\n\n"
        "–ö–ª—é—á –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—É–¥—É—Ç –≤—ã–¥–∞–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã."
    )
    buttons = [
        ("üí∏ CryptoBot", "pay_crypto"),
        ("üí≥ YooKassa", "pay_yookassa"),
        ("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "menu_main"),
    ]
    await query.edit_message_text(
        text,
        parse_mode="markdown",
        reply_markup=get_keyboard(buttons)
    )

async def pay_crypto(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    text = (
        "üí∏ *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã CryptoBot*\n\n"
        f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –æ–ø–ª–∞—Ç–∏—Ç—å *{PRICES['crypto_ton']} TON* –∑–∞ –ª–∏—Ü–µ–Ω–∑–∏—é Valture.\n\n"
        "–ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –æ–ø–ª–∞—Ç—ã –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –ª—é–±—É—é –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É.\n\n"
        "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–ø–ª–∞—Ç—É?"
        
    )
    buttons = [
        ("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", "pay_crypto_confirm"),
        ("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã", "pay"),
    ]
    await query.edit_message_text(
        text=text,
        parse_mode="markdown",
        reply_markup=get_keyboard(buttons)
    async def pay_crypto_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    username = query.from_user.username or query.from_user.full_name

    try:
        logger.debug(f"–°–æ–∑–¥–∞–Ω–∏–µ CryptoBot –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username} (ID: {user_id})")
        invoice, error = create_crypto_payment(amount=PRICES['crypto_ton'], asset="TON", description="Valture License")
        if not invoice or "pay_url" not not invoice:
            error_msg = (
                "‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞!*!\n\n"
                f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–Ω–≤–æ–π—Å: {error or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @s3.pt1ck."
            )
            buttons = [
                ("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", "pay_crypto"),
                ("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã", "pay"),
            ]
            logger.error(f"–û—à–∏–±–∫–∞ –≤ pay_crypto: {error}, invoice: {invoice}")
            await query.edit_message_text(
                text=error_msg,
                parse_mode="markdown",
                reply_markup=get_keyboard(buttons)
            )
            return

        invoice_id = invoice["invoice_id"]
        pay_url = invoice.get("pay_url")

        context.user_data["payment_type"] = "crypto"
        context.user_data["invoice_id"] = invoice_id
        context.user_data["username"] = username
        logger.info(f"CryptoBot invoice created: invoice_id={invoice_id}, pay_url={pay_url}")

        text = (
            "üí∏ *–û–ø–ª–∞—Ç–∏—Ç–µ —á–µ—Ä–µ–∑ CryptoBot*\n\n"
            f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã *{PRICES['crypto_ton']} TON* (–∏–ª–∏ —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç):\n\n"
            f"[–û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ CryptoBot]\n({pay_url})\n\n"
            "–ö–ª—é—á –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—É–¥—É—Ç –≤—ã–¥–∞–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã.\n"
            
        )
        buttons = [
            ("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã", "pay"),
        ]
        await query.edit_message_text(
            text=text,
            parse_mode="markdown",
            reply_markup=get_keyboard(buttons),
            disable_web_page_preview=True
        )

        context.job_queue.run_once(
            job=check_crypto_payment,
            when=12,
            context={
                "invoice_id": invoice_id,
                "user_id": user_id,
                "username": username,
                "chat_id": user_id,
                "attempts": 0,
            },
            name=f"check_crypto_{invoice_id}_{1}"
        )

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ pay_crypto_confirm: {e}")
        error_msg = (
            "‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!*n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @s3pt1ck.\n"
            
        )
        buttons = [
            ("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", "pay_crypto"),
            ("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã", "pay"),
        ]
        await query.edit_message_text(
            text=error_msg,
            parse_mode="markdown",
            reply_markup=get_keyboard(buttons)
        )

async def pay_yook(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    text = (
        "üí≥ *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ YooKassa*\n\n"
        f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –æ–ø–ª–∞—Ç–∏—Ç—å *{PRICES['yookassa_rub']} RUB* –∑–∞ –ª–∏—Ü–µ–Ω–∑–∏—é Valture.\n\n"
        "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–ø–ª–∞—Ç—É?"
        
    )
    buttons = [
        ("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", "pay_yookassa_confirm"),
        ("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã", "pay"),
    ]
    await query.edit_message_text(
        text=text,
        parse_mode="markdown",
        reply_markup=get_keyboard(buttons)
    )

async def pay_yookassa_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query()
    await query.answer()
    user_id = query.from_user.id
    username = query.from_user.username or query.from_user.full_name

    try:
        logger.debug(f"–°–æ–∑–¥–∞–Ω–∏–µ YooKassa –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username} (ID: {user_id})")
        payment, error = create_yookassa_payment(
            amount=PRICES['yookassa_rub'],
            description="Valture License",
            user_id=user_id,
            username=username
        )
        if not payment:
            error_msg = (
                "‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞!*n\n"
                f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂: {error or 'Unknown error'}.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @s3pt1ck.\n"
            )
            buttons = [
                ("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", "pay_yook"),
                ("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã", "pay"),
            ]
            logger.error(f"–û—à–∏–±–∫–∞ –≤ pay_yook: {error}")
            await query.edit_message_text(
                text=error_msg,
                parse_mode="markdown",
                reply_markup=get_keyboard(buttons)
            )
            
            return

        payment_id = payment.id
        confirmation_url = payment.confirmation.confirmation_url

        context.user_data["payment_type"] = "yookassa"
        context.user_data["payment_id"] = payment_id
        context.user_data["username"] = username
        logger.info(f"YooKassa payment created: payment_id={payment_id}, confirmation_url={confirmation_url}")

        text = (
            "üí≥ *–û–ø–ª–∞—Ç–∏—Ç–µ —á–µ—Ä–µ–∑ YooKassa*\n\n"
            f"–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã *{PRICES['yookassa_rub']} RUB*:\n"
            f"[–û–ø–ª–∞—Ç–∏—Ç—å —Å–µ–π—á–∞—Å]({confirmation_url}\n)\n"
            "–ö–ª—é—á –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—É–¥—É—Ç –≤—ã–¥–∞–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã.\n"
            
        )
        buttons = [
            ("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã", "pay"),
        ]
        await query.edit_message_text(
            text=text,
            parse_mode="markdown",
            reply_markup=get_keyboard(buttons),
            disable_web_page=False
        )

        context.job_queue.run_once(
            job=check_yookassa_payment,
            when=12,
            context={
                "payment_id": payment_id,
                "user_id": user_id,
                "username": username,
                "chat_id": user_id,
                "attempts": 0,
            },
            name=f"check_yoo_{payment_id}_{1}"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ pay_yookassa_confirm: {e}")
        error_msg = (
            "‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!*n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @s3pt1ck.\n"
            
        )
        buttons = [
            ("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", "pay_yook"),
            ("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã", "pay"),
        ]
        await query.edit_message_text(
            text=error_msg,
            parse_mode="markdown",
            reply_markup=get_keyboard(buttons)
        )

async def support(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    text = (
        "üìû *–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞*\n\n"
        "–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏:\n"
        "üëâ @s3pt1ck\n\n"
        "–ú—ã –æ—Ç–≤–µ—Ç–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±—ã—Å—Ç—Ä–æ! üòä"
        
    )
    buttons = [
        ("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "menu_main"),
    ]
    await query.edit_message_text(
        text=text,
        parse_mode="markdown",
        reply_markup=get_keyboard(buttons)
    )

async def faq(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    text = (
        "‚ùì *–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã*\n\n"
        "üîπ **–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é?**\n"
        "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ '–û–ø–ª–∞—Ç–∏—Ç—å' –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã.\n\n"
        "üîπ **–ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ –∫–ª—é—á –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç?**n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @s3pt1ck.\n\n"
        "üîπ **–ú–æ–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–ª—é—á –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö?**n\n"
        "–ù–µ—Ç, –∫–ª—é—á –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –æ–¥–Ω–æ–º—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É.\n"
        
    )
    buttons = [
        ("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "menu_main"),
    ]
    await query.edit_message_text(
        text=text,
        parse_mode="markdown",
        reply_markup=get_keyboard(buttons)
    )

async def news_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    text = (
        "üóû *–ù–æ–≤–æ—Å—Ç–∏ Valture*\n\n"
        "–°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–∞—à–∏–º–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!\n\n"
        "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç.\n\n"
        
    )
    
    buttons = [
        ("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "menu_main"),
    ]
    await query.edit_message_text(
        text=text,
        parse_mode="markdown",
        reply_markup=get_keyboard(buttons)
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query()
    data = query.data
    
    if data == "menu_main":
        await main_menu(update, context)
    elif data == "pay":
        await pay(update, context)
    elif data == "pay_crypto":
        await pay_crypto(update, context)
    elif data == "pay_crypto_confirm":
        await pay_crypto_confirm(update, context)
    elif data == "pay_yook":
        await pay_yook(update, context)
    elif data == "pay_yookassa_confirm":
        await pay_yookassa_confirm(update, context)
    elif data == "menu_support":
        await support(update, context)
    elif data == "menu_faq":
        await faq(update, context)
    elif data == "menu_data":
        await about(update, context)
    elif data == "news_info":
        await news_info(update, context)
    else:
        await query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞!")

async def main():
    try:
        application = Application.builder().token(BOT_TOKEN).build()

        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("query_payment", query_payment))
        application.add_handler(CommandHandler("check_logs", check_logs))
        application.add_handler(CallbackQueryHandler(button_handler))

        flask_thread = Thread(target=run_flask)
        flask_thread.start()

        logger.info("Starting bot...")
        await application.run_polling()
    except Exception as e:
        logger.error(f"Failed to start bot: {e}")
        raise

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
</xaiagram>       
