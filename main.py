import os
import logging
import secrets
import hmac
import hashlib
import json
from datetime import datetime, timezone, timedelta
from threading import Thread

from flask import Flask, request, abort

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update, Bot
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler, ContextTypes
)

import gspread
from google.oauth2.service_account import Credentials

from yookassa import Configuration, Payment

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
BOT_TOKEN = os.getenv("BOT_TOKEN")
CREDS_FILE = "valture-license-bot-account.json"
SPREADSHEET_NAME = "valture"
SCOPE = [
    "https://www.googleapis.com/auth/spreadsheets",
    "https://www.googleapis.com/auth/drive",
]

YOOKASSA_SHOP_ID = "1095145"  # –¢–≤–æ–π shopId –∂—ë—Å—Ç–∫–æ –ø—Ä–æ–ø–∏—Å–∞–Ω –∑–¥–µ—Å—å
YOOKASSA_SECRET_KEY = os.getenv("YOOKASSA_SECRET_KEY")
if not BOT_TOKEN:
    raise Exception("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω!")
if not YOOKASSA_SECRET_KEY:
    raise Exception("YOOKASSA_SECRET_KEY –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

Configuration.account_id = YOOKASSA_SHOP_ID
Configuration.secret_key = YOOKASSA_SECRET_KEY

# --- Flask ---
app = Flask(__name__)

@app.route('/')
def home():
    return "‚úÖ Valture –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

def verify_signature(secret, body, signature):
    computed = hmac.new(secret.encode(), body, hashlib.sha256).hexdigest()
    return hmac.compare_digest(computed, signature)

@app.route('/yookassa-webhook', methods=['POST'])
def yookassa_webhook():
    signature = request.headers.get('X-Request-Signature-SHA256')
    body = request.get_data()
    if not verify_signature(YOOKASSA_SECRET_KEY, body, signature):
        logger.warning("–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å webhook")
        abort(400, "Invalid signature")

    data = json.loads(body)
    event = data.get('event')
    logger.info(f"–°–æ–±—ã—Ç–∏–µ –æ—Ç YooKassa: {event}")

    if event == 'payment.succeeded':
        payment_obj = data.get('object', {}).get('payment', {})
        username = payment_obj.get('metadata', {}).get('username')
        if username:
            try:
                license_key = generate_license()
                append_license_to_sheet(license_key, username)
                bot = Bot(token=BOT_TOKEN)
                bot.send_message(
                    chat_id=f"@{username}",
                    text=(
                        f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–∫—É–ø–∫–æ–π!\n\n"
                        f"–í–∞—à –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–π –∫–ª—é—á:\n`{license_key}`\n\n"
                        "–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –µ–≥–æ –≤ –Ω–∞–¥–µ–∂–Ω–æ–º –º–µ—Å—Ç–µ!"
                    ),
                    parse_mode="Markdown"
                )
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ª–∏—Ü–µ–Ω–∑–∏—è @{username}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–∏—Ü–µ–Ω–∑–∏–∏: {e}")
        else:
            logger.warning("–í webhook –Ω–µ—Ç username –≤ metadata")

    return '', 200

def run_flask():
    port = int(os.environ.get("PORT", 8080))
    app.run(host="0.0.0.0", port=port)

# --- Google Sheets ---
sheet_cache = None
def get_sheet():
    global sheet_cache
    if sheet_cache is None:
        creds = Credentials.from_service_account_file(CREDS_FILE, scopes=SCOPE)
        client = gspread.authorize(creds)
        sheet_cache = client.open(SPREADSHEET_NAME).sheet1
        logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Google Sheets")
    return sheet_cache

def generate_license(length=32):
    key = ''.join(secrets.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789') for _ in range(length))
    logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∫–ª—é—á: {key}")
    return key

def append_license_to_sheet(license_key, username):
    sheet = get_sheet()
    tz = timezone(timedelta(hours=3))  # –ú–æ—Å–∫–≤–∞ +3 —á–∞—Å–∞
    now_str = datetime.now(tz).strftime("%Y-%m-%d %H:%M:%S")
    sheet.append_row([license_key, "", username, now_str])
    logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –ª–∏—Ü–µ–Ω–∑–∏—è {license_key} –¥–ª—è {username}")

# --- –¢–µ–ª–µ–≥—Ä–∞–º –º–µ–Ω—é –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def get_keyboard(buttons):
    return InlineKeyboardMarkup([[InlineKeyboardButton(text, callback_data=callback)] for text, callback in buttons])

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Valture111!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    await update.message.reply_text(text, reply_markup=get_keyboard([("üìã –ú–µ–Ω—é", "menu_main")]))

async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    buttons = [
        ("‚ÑπÔ∏è –û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏", "menu_about"),
        ("üí≥ –ö—É–ø–∏—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é", "menu_pay"),
        ("‚ùì FAQ", "menu_faq"),
        ("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", "menu_support"),
    ]
    await query.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_keyboard(buttons))

async def about(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    text = (
        "Valture ‚Äî –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ –∏–≥—Ä–∞—Ö.\n"
        "–£–≤–µ–ª–∏—á–µ–Ω–∏–µ FPS, –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è Windows –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ."
    )
    await query.edit_message_text(text, reply_markup=get_keyboard([("üîô –ù–∞–∑–∞–¥", "menu_main")]))

async def pay(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    text = (
        "–°—Ç–æ–∏–º–æ—Å—Ç—å –ª–∏—Ü–µ–Ω–∑–∏–∏ ‚Äî 1000 —Ä—É–±–ª–µ–π.\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –∫–ª—é—á –≤ —ç—Ç–æ–º —á–∞—Ç–µ.\n\n"
        "–ì–æ—Ç–æ–≤—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?"
    )
    await query.edit_message_text(text, reply_markup=get_keyboard([("‚úÖ –û–ø–ª–∞—Ç–∏—Ç—å", "pay_confirm"), ("üîô –ù–∞–∑–∞–¥", "menu_main")]))

async def pay_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    try:
        amount_value = "1000.00"
        username = query.from_user.username or str(query.from_user.id)
        logger.info(f"–°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –¥–ª—è {username} –Ω–∞ —Å—É–º–º—É {amount_value}")

        payment = Payment.create({
            "amount": {
                "value": amount_value,
                "currency": "RUB"
            },
            "confirmation": {
                "type": "redirect",
                "return_url": "https://t.me/valture_support_bot"  # —Å—Å—ã–ª–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
            },
            "capture": True,
            "description": "–ü–æ–∫—É–ø–∫–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏ Valture",
            "metadata": {"username": username}
        }, idempotence_key=secrets.token_hex(16))

        pay_url = payment.confirmation.confirmation_url
        logger.info(f"–ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω, —Å—Å—ã–ª–∫–∞: {pay_url}")

        await query.edit_message_text(
            f"–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n{pay_url}",
            disable_web_page_preview=True
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def faq(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    text = (
        "FAQ:\n"
        "- –ö–ª—é—á –Ω–µ –ø—Ä–∏—à—ë–ª? –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.\n"
        "- –õ–∏—Ü–µ–Ω–∑–∏—è –¥–ª—è –æ–¥–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.\n"
        "- –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @valture_support_bot"
    )
    await query.edit_message_text(text, reply_markup=get_keyboard([("üîô –ù–∞–∑–∞–¥", "menu_main")]))

async def support(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    text = "–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏: @valture_support_bot"
    await query.edit_message_text(text, reply_markup=get_keyboard([("üîô –ù–∞–∑–∞–¥", "menu_main")]))

async def callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data
    if data == "menu_main":
        await main_menu(update, context)
    elif data == "menu_about":
        await about(update, context)
    elif data == "menu_pay":
        await pay(update, context)
    elif data == "pay_confirm":
        await pay_confirm(update, context)
    elif data == "menu_faq":
        await faq(update, context)
    elif data == "menu_support":
        await support(update, context)
    else:
        await query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞", show_alert=True)

# --- –ó–∞–ø—É—Å–∫ ---

def main():
    application = Application.builder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(callback_handler))

    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ –¥–ª—è –ø—Ä–∏–µ–º–∞ webhook –æ—Ç YooKassa
    flask_thread = Thread(target=run_flask, daemon=True)
    flask_thread.start()

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling()

if __name__ == "__main__":
    main()
