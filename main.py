import os
import logging
import random
import string
from datetime import datetime, timezone, timedelta

from flask import Flask
from threading import Thread

from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

import gspread
from google.oauth2.service_account import Credentials

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---

BOT_TOKEN = os.environ.get("BOT_TOKEN") or "7941872387:AAGZayILmna-qHHyQy5V50wDGylo3yFCZ0A"
CREDS_FILE = "valture-license-bot-account.json"
SPREADSHEET_NAME = "valture"
SCOPE = [
    "https://www.googleapis.com/auth/spreadsheets",
    "https://www.googleapis.com/auth/drive",
]

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- Flask –¥–ª—è keep-alive ---

app = Flask(__name__)

@app.route('/')
def home():
    return "‚úÖ Valture –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

def run_flask():
    port = int(os.environ.get("PORT", 8080))
    app.run(host="0.0.0.0", port=port)

# --- –õ–æ–≥–∏–∫–∞ Telegram –±–æ—Ç–∞ ---

def generate_license(length=32):
    return ''.join(random.choices(string.ascii_uppercase + string.digits, k=length))

def append_license_to_sheet(license_key, username):
    creds = Credentials.from_service_account_file(CREDS_FILE, scopes=SCOPE)
    client = gspread.authorize(creds)
    sheet = client.open(SPREADSHEET_NAME).sheet1

    # –í—Ä–µ–º—è UTC+2 (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ)
    utc_plus_2 = timezone(timedelta(hours=2))
    now_utc_plus_2 = datetime.now(utc_plus_2)
    now_str = now_utc_plus_2.strftime("%Y-%m-%d %H:%M:%S")

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∫–æ–ª–æ–Ω–∫–∏: A - –∫–ª—é—á, B - –ø—É—Å—Ç–æ, C - –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, D - –≤—Ä–µ–º—è –ø–æ–∫—É–ø–∫–∏
    sheet.append_row([license_key, "", username, now_str])

def get_keyboard(buttons):
    return InlineKeyboardMarkup([[InlineKeyboardButton(text, callback_data=callback)] for text, callback in buttons])

async def start(update: "Update", context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Valture ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –≥–µ–π–º–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ü–µ–Ω—è—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å!\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é.",
        reply_markup=get_keyboard([("üìã –ú–µ–Ω—é", "menu_main")])
    )

async def main_menu(update: "Update", context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    buttons = [
        ("üí≥ –û–ø–ª–∞—Ç–∞", "menu_pay"),
        ("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", "menu_support"),
        ("‚ùì FAQ", "menu_faq"),
        ("‚ÑπÔ∏è –û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏", "menu_about"),
    ]
    await query.edit_message_text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=get_keyboard(buttons))

async def about(update: "Update", context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    text = (
        "‚ú® *–û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ Valture*\n\n"
        "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
        "üöÄ +20‚Äì30% FPS\n"
        "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
        "üõ°Ô∏è –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Ñ—Ä–µ–π–º—Ä–µ–π—Ç–∞\n"
        "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
        "üí° –û—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã\n"
        "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
        "üî∞ –£–º–µ–Ω—å—à–µ–Ω–∏–µ –∑–∞–¥–µ—Ä–∂–µ–∫\n"
        "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
        "üõ≥Ô∏è –ü–ª–∞–≤–Ω–æ—Å—Ç—å –∏ —á–µ—Ç–∫–æ—Å—Ç—å –º—ã—à–∏\n"
        "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
        "üñ•Ô∏è –ü–ª–∞–≤–Ω–æ—Å—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∏ –≤ –∏–≥—Ä–∞—Ö\n"
        "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
        "üîã –ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Windows\n\n"
        "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
        "_–°–æ–∑–¥–∞–Ω–æ –¥–ª—è –≥–µ–π–º–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ü–µ–Ω—è—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å._"
    )
    buttons = [
        ("üí≥ –û–ø–ª–∞—Ç–∞", "menu_pay"),
        ("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", "menu_support"),
        ("‚ùì FAQ", "menu_faq"),
    ]
    await query.edit_message_text(text, parse_mode="Markdown", reply_markup=get_keyboard(buttons))

async def pay(update: "Update", context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    text = (
        "üí≥ *–û–ø–ª–∞—Ç–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏ Valture*\n\n"
        "—Ü–µ–Ω–∞ 1000 —Ä—É–±–ª–µ–π.\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ª–∏—Ü–µ–Ω–∑–∏—è –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã—Å–ª–∞–Ω–∞ –≤–∞–º –≤ —á–∞—Ç.\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é."
    )
    buttons = [
        ("–æ–ø–ª–∞—Ç–∏—Ç—å", "pay_confirm"),
    ]
    await query.edit_message_text(text, parse_mode="Markdown", reply_markup=get_keyboard(buttons))

async def pay_confirm(update: "Update", context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    license_key = generate_license()
    username = query.from_user.username or query.from_user.full_name
    append_license_to_sheet(license_key, username)

    await query.edit_message_text(f"‚úÖ –í–æ—Ç –≤–∞—à –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–π –∫–ª—é—á:\n\n`{license_key}`", parse_mode="Markdown")

async def support(update: "Update", context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    text = (
        "üìû *–ü–æ–¥–¥–µ—Ä–∂–∫–∞ Valture*\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –ø–∏—à–∏—Ç–µ —Å—é–¥–∞: @your_support_username"
    )
    buttons = [("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "menu_main")]
    await query.edit_message_text(text, parse_mode="Markdown", reply_markup=get_keyboard(buttons))

async def faq(update: "Update", context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    text = (
        "‚ùì *FAQ*\n\n"
        "1. –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é?\n"
        "- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–æ–ø–ª–∞—Ç–∏—Ç—å' –≤ –º–µ–Ω—é –æ–ø–ª–∞—Ç—ã.\n\n"
        "2. –ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ –∫–ª—é—á –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç?\n"
        "- –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.\n\n"
        "3. –ú–æ–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö?\n"
        "- –ù–µ—Ç, –∫–ª—é—á –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –æ–¥–Ω–æ–º—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É."
    )
    buttons = [("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "menu_main")]
    await query.edit_message_text(text, parse_mode="Markdown", reply_markup=get_keyboard(buttons))

async def button_handler(update: "Update", context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data

    if data == "menu_main":
        await main_menu(update, context)
    elif data == "menu_pay":
        await pay(update, context)
    elif data == "pay_confirm":
        await pay_confirm(update, context)
    elif data == "menu_support":
        await support(update, context)
    elif data == "menu_faq":
        await faq(update, context)
    elif data == "menu_about":
        await about(update, context)

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ (keep alive)
    Thread(target=run_flask).start()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application = Application.builder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))

    print("‚úÖ Valture –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    application.run_polling()
